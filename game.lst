------- FILE game.asm LEVEL 1 PASS 3
      1  1e17					      processor	6502
      2  1204					      org	$1204	; 1400 originally. should be free
      3  1204
      4  1204							; keyboard scan routine at eb1e, fills in $cb and f5. Scans $9120 and $9121. quite long
      5  1204				   start      subroutine
      6  1204		       20 d7 14 	      jsr	onceOnlyInit
      7  1207		       20 12 15 	      jsr	init
      8  120a				   restart
      9  120a		       20 7f 1a 	      jsr	startScreen
     10  120d		       20 12 15 	      jsr	init
     11  1210		       20 b7 18 	      jsr	thrust	; give the ship a short thrust to start off
     12  1213		       20 84 17 	      jsr	drawline
     13  1216		       20 2c 13 	      jsr	scrollNow
     14  1219		       4c ec 12 	      jmp	smoothScrollLoop
     15  121c
     16  121c		       93 12 1f 3e*welcome    dc.b	147,18,31,">>>>>>>>>>>>>>>> 00000",146,0
     17  1237		       13 11 11 11*startMessage dc.b	19,17,17,17,17,17,17,18, 5,29, 29, 29, " SPACE SHIP '83 ", 13
     18  1254		       11 11 11 11*	      dc.b	17,17,17,17, 159, 29, 29, 29, 18, " SPACE TO START ",13,0
     19  126f
     20  126f		       00	   welcometerminator dc	0
     21  1270
     22  1270		       00 01	   enabled    equ	1
     23  1270		       00 04	   disabled   equ	4
     24  1270
     25  1270		       91 13	   joystickDDR1 equ	$9113
     26  1270		       91 22	   joystickDDR2 equ	$9122
     27  1270		       91 11	   joystickIn1 equ	$9111
     28  1270		       91 20	   joystickIn2 equ	$9120
     29  1270
     30  1270		       90 00	   horizontalScreenPosition equ	$9000	; bottom 6 bits only
     31  1270		       90 01	   verticalScreenPosition equ	$9001
     32  1270		       00 0c	   horizontalScreenDefaultPosition equ	12
     33  1270		       00 24	   verticalScreenDefaultPosition equ	36
     34  1270
     35  1270		       00 ff	   directionUp equ	$ff
     36  1270		       00 01	   directionDown equ	$01
     37  1270		       90 04	   rasterline equ	$9004
     38  1270		       90 0f	   borderPaper equ	$900f
     39  1270		       02 88	   screenMemoryPage equ	648	; screen memory page for operating system
     40  1270		       ff d2	   CHROUT     equ	$ffd2	; ROM routine
     41  1270		       10 00	   screenstart equ	$1000	; $1e00 for unexpanded VIC, $1000 for expanded
     42  1270		       00 10	   screenstarthigh equ	$10	; $1e for unexpanded VIC, $10 for expanded
     43  1270		       94 00	   colorstart equ	$9400
     44  1270		       00 94	   colorstarthigh equ	$94	; $94 for expanded VIC, $96 for unexpanded VIC
     45  1270		       00 16	   screenwidth equ	22
     46  1270		       00 17	   screenheight equ	23
     47  1270		       00 0a	   fuelIncreaseAmount equ	10
     48  1270		       00 64	   shipimpulse equ	100
     49  1270		       00 05	   gravity    equ	5
     50  1270		       00 c5	   keypress   equ	197	; zero page location
     51  1270		       00 20	   keyspace   equ	32
     52  1270		       00 40	   nokey      equ	64
     53  1270		       90 05	   charDefinitionPointer equ	36869
     54  1270		       00 16	   nextLineLength equ	22	; 22 positions in all
     55  1270
     56  1270		       00 14	   amountToIncreaseSpeedBy equ	20
     57  1270
     58  1270							; zero page variables
     59  1270		       00 fe	   shipy      equ	254
     60  1270		       00 fd	   shipMinorY equ	253
     61  1270		       00 fb	   cursor     equ	251	; also 252
     62  1270		       00 f3	   colorcursor equ	243
     63  1270		       00 cf	   shipdy     equ	207
     64  1270		       00 cd	   jetSound   equ	205
     65  1270		       00 cc	   scrollCounter equ	204
     66  1270		       00 b3	   lastkey    equ	179
     67  1270		       00 b2	   fuel       equ	178
     68  1270		       00 b1	   shipdx     equ	177
     69  1270		       00 b0	   shipMinorX equ	176
     70  1270		       00 ab	   shipx      equ	171
     71  1270		       00 aa	   shipDirection equ	170
     72  1270		       00 a9	   fuelSoundCount equ	169
     73  1270		       00 a6	   diff       equ	166
     74  1270		       00 a5	   charReplaced equ	165
     75  1270		       00 a4	   character  equ	164	; put in zero page ; Every 1 and 8 frames during refresh * speed up. Maybe even self modifying code.
     76  1270		       00 97	   charReplaced2 equ	151
     77  1270		       00 96	   towerTopCharacter equ	150
     78  1270		       00 93	   towerMiddleCharacter equ	147
     79  1270		       00 92	   distanceBetweenTowers equ	146
     80  1270		       00 8f	   gapWidth   equ	143
     81  1270		       00 8e	   minShipDx  equ	142
     82  1270							;physicsCountdownInitialValue equ 141
     83  1270		       00 8c	   progressCounterLo equ	140
     84  1270		       00 8b	   progressCounterHi equ	139
     85  1270		       00 8a	   topTowerEdgeCharacter equ	138
     86  1270		       00 89	   topTowerMiddleCharacter equ	137
     87  1270		       00 17	   shipToBeDrawnAt1 equ	23	; +1
     88  1270		       00 19	   shipToBeDrawnAt2 equ	25	; +1
     89  1270
     90  1270		       00 00	   nextLine   equ	0	; put at start of zero page
     91  1270
     92  1270		       00 1b	   towercharacters equ	27	;	 4 bytes
     93  1270		       00 1f	   towerTopCharacters equ	31	; 4 bytes
     94  1270		       00 23	   topTowerCharacters equ	35	; 4 bytes
     95  1270		       00 27	   topTowerEdgeCharacters equ	39	; 4 bytes
     96  1270							;framesSinceLastScroll	equ 43
     97  1270		       00 2b	   lastFrameWasScroll equ	43
     98  1270
     99  1270							; non zero page variables
    100  1270		       00	   levelNumber dc.b	0	; infrequent
    101  1271		       ea 11	   randseed   dc	234, 17	; Occasionally
    102  1273		       00	   flags      dc	0	; bit 0 indicates ship is crashing
    103  1274		       01	   rocketProbability dc	1
    104  1275
    105  1275		       00 01	   crashing   equ	1
    106  1275
    107  1275				   .outOfFuel
    108  1275		       4c 0a 12 	      jmp	restart
    109  1278
    110  1278				   collision  subroutine
    111  1278							; if end of game, return with zero flag not set
    112  1278							; what have we collided with?
    113  1278		       c9 04		      cmp	#fuelLeftPrintable
    114  127a		       f0 3a		      beq	.collectFuelLeft
    115  127c		       c9 0b		      cmp	#fuelRightPrintable
    116  127e		       f0 41		      beq	.collectFuelRight
    117  1280
    118  1280							; explosion?
    119  1280		       c9 13		      cmp	#explodePrintable
    120  1282		       f0 5c		      beq	.finishedNotFatal
    121  1284
    122  1284							; collided with something. Draw an explosion
    123  1284		       c6 17		      dec	shipToBeDrawnAt1
    124  1286		       c6 17		      dec	shipToBeDrawnAt1
    125  1288		       c6 19		      dec	shipToBeDrawnAt2
    126  128a		       c6 19		      dec	shipToBeDrawnAt2
    127  128c
    128  128c		       a9 13		      lda	#explodePrintable
    129  128e		       a0 05		      ldy	#5
    130  1290				   .explosionLoop
    131  1290		       91 17		      sta	(shipToBeDrawnAt1),y
    132  1292		       91 19		      sta	(shipToBeDrawnAt2),y
    133  1294		       88		      dey
    134  1295		       d0 f9		      bne	.explosionLoop
    135  1297
    136  1297		       20 51 1a 	      jsr	explosionEffect
    137  129a		       20 35 14 	      jsr	updateBonuses
    138  129d
    139  129d		       a9 00		      lda	#0
    140  129f		       85 cf		      sta	shipdy
    141  12a1
    142  12a1		       c6 b2		      dec	fuel
    143  12a3		       a5 b2		      lda	fuel
    144  12a5		       c9 ff		      cmp	#255	; wrapped around, i.e. no fuel left
    145  12a7		       d0 0c		      bne	.explosionDone
    146  12a9		       ad 73 12 	      lda	flags
    147  12ac		       09 01		      ora	#crashing
    148  12ae		       8d 73 12 	      sta	flags
    149  12b1		       a9 00		      lda	#0
    150  12b3		       85 b2		      sta	fuel
    151  12b5				   .explosionDone
    152  12b5		       60		      rts		; zero flag set, indicates fatal
    153  12b6				   .collectFuelLeft
    154  12b6		       a9 20		      lda	#spacePrintable
    155  12b8		       a0 01		      ldy	#1
    156  12ba		       91 17		      sta	(shipToBeDrawnAt1),y
    157  12bc		       91 19		      sta	(shipToBeDrawnAt2),y
    158  12be		       4c d4 12 	      jmp	.increaseFuelNow
    159  12c1				   .collectFuelRight
    160  12c1		       a9 20		      lda	#spacePrintable
    161  12c3		       a0 00		      ldy	#0
    162  12c5		       c6 17		      dec	shipToBeDrawnAt1
    163  12c7		       c6 19		      dec	shipToBeDrawnAt2
    164  12c9		       91 17		      sta	(shipToBeDrawnAt1),y
    165  12cb		       91 19		      sta	(shipToBeDrawnAt2),y
    166  12cd		       e6 17		      inc	shipToBeDrawnAt1
    167  12cf		       e6 19		      inc	shipToBeDrawnAt2
    168  12d1		       4c d4 12 	      jmp	.increaseFuelNow
    169  12d4				   .increaseFuelNow
    170  12d4		       20 a8 14 	      jsr	increaseScoreBy100
    171  12d7		       a9 80		      lda	#128
    172  12d9		       85 a9		      sta	fuelSoundCount
    173  12db		       a9 0a		      lda	#fuelIncreaseAmount
    174  12dd		       20 5c 14 	      jsr	increaseFuel
    175  12e0				   .finishedNotFatal
    176  12e0		       a9 01		      lda	#1	; clear zero flag to indicate non-fatal
    177  12e2		       60		      rts
    178  12e3
    179  12e3				   endGame
    180  12e3							; End of game
    181  12e3		       20 68 1a 	      jsr	explode
    182  12e6		       20 c1 19 	      jsr	stopSound
    183  12e9		       4c 0a 12 	      jmp	restart
    184  12ec
    185  12ec				   smoothScrollLoop
    186  12ec		       a5 2b		      lda	lastFrameWasScroll
    187  12ee		       c9 00		      cmp	#0
    188  12f0		       f0 07		      beq	.normal
    189  12f2		       a9 00		      lda	#0
    190  12f4		       85 2b		      sta	lastFrameWasScroll
    191  12f6		       4c 02 13 	      jmp	dontdrawship
    192  12f9				   .normal
    193  12f9		       20 7c 18 	      jsr	clearship
    194  12fc		       20 1c 18 	      jsr	workOutShipPosition
    195  12ff		       20 3f 18 	      jsr	drawship
    196  1302				   dontdrawship
    197  1302		       a5 a5		      lda	charReplaced
    198  1304		       c9 20		      cmp	#spacePrintable
    199  1306		       f0 03		      beq	.doneCollision1
    200  1308		       20 78 12 	      jsr	collision	; deal with the collision. Returns with zero flag not set if fatal
    201  130b				   .doneCollision1
    202  130b		       a5 97		      lda	charReplaced2
    203  130d		       c9 20		      cmp	#spacePrintable
    204  130f		       f0 0a		      beq	.doneCollision2
    205  1311							; move cursor up one line so collected object is cleared
    206  1311		       a9 16		      lda	#22	; screen width
    207  1313		       20 90 16 	      jsr	subcursor
    208  1316		       a5 97		      lda	charReplaced2
    209  1318		       20 78 12 	      jsr	collision	; deal with the collision. Returns with zero flag set if fatal
    210  131b				   .doneCollision2
    211  131b		       20 93 18 	      jsr	control
    212  131e		       20 d6 19 	      jsr	updateSound
    213  1321		       20 0d 18 	      jsr	rasterdelay
    214  1324		       20 da 18 	      jsr	physics
    215  1327		       f0 ba		      beq	endGame
    216  1329
    217  1329		       4c ec 12 	      jmp	smoothScrollLoop
    218  132c
    219  132c				   scrollNow
    220  132c		       20 7c 18 	      jsr	clearship
    221  132f		       20 1c 18 	      jsr	workOutShipPosition
    222  1332		       20 08 16 	      jsr	scroll
    223  1335		       20 2f 14 	      jsr	updatePeriodic
    224  1338
    225  1338		       a9 08		      lda	#8
    226  133a		       85 cc		      sta	scrollCounter
    227  133c		       85 2b		      sta	lastFrameWasScroll
    228  133e		       60		      rts
    229  133f				   prepareLine
    230  133f		       20 84 17 	      jsr	drawline
    231  1342		       4c 88 13 	      jmp	donePrepareLine
    232  1345
    233  1345				   smoothScroll subroutine
    234  1345							; first scroll the double character scollables
    235  1345		       a2 38		      ldx	#8 * numberOfScrollableCharacters
    236  1347				   .loop
    237  1347		       ca		      dex
    238  1348		       18		      clc
    239  1349		       3e 38 1c 	      rol	rightEdges,x
    240  134c		       3e 00 1c 	      rol	leftEdges,x
    241  134f		       e0 00		      cpx	#0
    242  1351		       d0 f4		      bne	.loop
    243  1353
    244  1353							; next scroll the single character scrollables
    245  1353		       a2 20		      ldx	#8 * numberOfSingleScrollableChars
    246  1355				   .singleLoop
    247  1355		       ca		      dex
    248  1356		       bd 88 1c 	      lda	singleScrollable,x
    249  1359		       0a		      asl
    250  135a		       90 02		      bcc	.noWrapAround
    251  135c		       09 01		      ora	#1	; set bottom bit if it fell off the top
    252  135e				   .noWrapAround
    253  135e		       9d 88 1c 	      sta	singleScrollable,x
    254  1361		       e0 00		      cpx	#0
    255  1363		       d0 f0		      bne	.singleLoop
    256  1365				   .finished
    257  1365		       a5 cc		      lda	scrollCounter
    258  1367		       c9 01		      cmp	#1
    259  1369		       d0 12		      bne	.finishedSmoothScroll
    260  136b				   .resetScroll
    261  136b		       a2 38		      ldx	#8 * numberOfScrollableCharacters	; 8 bytes per character
    262  136d				   .loop2
    263  136d		       ca		      dex
    264  136e							; copy back from left to right and clear the left
    265  136e		       bd 00 1c 	      lda	leftEdges,x
    266  1371		       9d 38 1c 	      sta	rightEdges,x
    267  1374		       a9 00		      lda	#0
    268  1376		       9d 00 1c 	      sta	leftEdges,x
    269  1379		       e0 00		      cpx	#0
    270  137b		       d0 f0		      bne	.loop2
    271  137d
    272  137d				   .finishedSmoothScroll
    273  137d		       60		      rts
    274  137e
    275  137e				   handleFullScroll
    276  137e		       a5 cc		      lda	scrollCounter
    277  1380		       c9 05		      cmp	#5
    278  1382		       f0 bb		      beq	prepareLine
    279  1384		       c9 06		      cmp	#6
    280  1386		       f0 05		      beq	updateFrame
    281  1388				   donePrepareLine
    282  1388		       c6 cc		      dec	scrollCounter
    283  138a		       f0 a0		      beq	scrollNow
    284  138c		       60		      rts
    285  138d
    286  138d				   updateFrame subroutine
    287  138d							; update positions of characters. Happens out of phase with full character scrolling
    288  138d		       a9 14		      lda	#screenHeight - 4
    289  138f		       8d d9 18 	      sta	temp2
    290  1392
    291  1392		       a2 10		      ldx	#screenstarthigh	; put start of screen hi in cursor position
    292  1394		       a0 00		      ldy	#0	; screen scroll start lo
    293  1396		       86 f4		      stx.z	colorcursor + 1
    294  1398		       84 f3		      sty.z	colorcursor
    295  139a
    296  139a		       a0 16		      ldy	#22	; current offset from cursor
    297  139c		       a2 16		      ldx	#22	; 22-x position
    298  139e				   .loop
    299  139e		       b1 f3		      lda	(colorcursor),y
    300  13a0		       c9 20		      cmp	#spacePrintable
    301  13a2		       f0 08		      beq	.space
    302  13a4		       c9 13		      cmp	#explodePrintable
    303  13a6		       f0 25		      beq	.explosion
    304  13a8		       c9 05		      cmp	#baddyLeftPrintable
    305  13aa		       f0 41		      beq	.baddy
    306  13ac				   .space
    307  13ac				   .doneChange
    308  13ac		       e6 f3		      inc	colorcursor
    309  13ae		       f0 18		      beq	.pageJump
    310  13b0				   .donePageJump
    311  13b0		       ca		      dex
    312  13b1		       f0 06		      beq	.resetx
    313  13b3				   .doneResetX
    314  13b3		       4c 9e 13 	      jmp	.loop
    315  13b6				   .done
    316  13b6		       4c 88 13 	      jmp	donePrepareLine
    317  13b9				   .resetx
    318  13b9		       a2 16		      ldx	#22
    319  13bb		       ce d9 18 	      dec	temp2
    320  13be		       a9 ff		      lda	#255
    321  13c0		       cd d9 18 	      cmp	temp2
    322  13c3		       f0 f1		      beq	.done	; end of screen?
    323  13c5		       4c 9e 13 	      jmp	.loop
    324  13c8				   .pageJump
    325  13c8		       e6 f4		      inc	colorcursor + 1
    326  13ca		       4c b0 13 	      jmp	.donePageJump
    327  13cd				   .explosion
    328  13cd		       20 ed 17 	      jsr	random
    329  13d0		       29 03		      and	#3
    330  13d2		       f0 03		      beq	.explosionPropogate
    331  13d4		       4c ac 13 	      jmp	.doneChange
    332  13d7				   .explosionPropogate
    333  13d7		       ad d9 18 	      lda	temp2
    334  13da		       c9 00		      cmp	#0
    335  13dc		       f0 ce		      beq	.doneChange
    336  13de		       a9 20		      lda	#spacePrintable
    337  13e0		       91 f3		      sta	(colorcursor),y
    338  13e2		       a0 2d		      ldy	#23 + 22
    339  13e4		       a9 13		      lda	#explodePrintable
    340  13e6		       91 f3		      sta	(colorcursor),y
    341  13e8		       a0 16		      ldy	#22
    342  13ea		       4c ac 13 	      jmp	.doneChange
    343  13ed
    344  13ed				   .baddy
    345  13ed							; if we are at the far end of the screen, don't move, as only half of the
    346  13ed							; baddy will have been drawn
    347  13ed		       e0 01		      cpx	#1	;21
    348  13ef		       f0 bb		      beq	.doneChange
    349  13f1
    350  13f1							; if on the ground (1 above ground, as 2 high), randomly launch
    351  13f1		       ad d9 18 	      lda	temp2
    352  13f4		       c9 01		      cmp	#1
    353  13f6		       d0 0c		      bne	.flying
    354  13f8		       20 ed 17 	      jsr	random
    355  13fb		       29 07		      and	#$7
    356  13fd		       f0 05		      beq	.flying
    357  13ff		       a0 2c		      ldy	#22 + 22
    358  1401		       4c 21 14 	      jmp	.drawBottomOnly
    359  1404				   .flying
    360  1404							; clear space below the rocket
    361  1404		       a9 20		      lda	#spacePrintable
    362  1406		       a0 2d		      ldy	#23 + 22
    363  1408		       91 f3		      sta	(colorcursor),y
    364  140a		       88		      dey
    365  140b		       91 f3		      sta	(colorcursor),y
    366  140d
    367  140d							; have we reached the top of the screen?
    368  140d		       ac d9 18 	      ldy	temp2
    369  1410		       c0 14		      cpy	#screenHeight - 4
    370  1412		       f0 16		      beq	.notDrawNextBaddy
    371  1414
    372  1414							; draw whole rocket
    373  1414							; first the top
    374  1414		       a0 00		      ldy	#0
    375  1416		       a9 05		      lda	#baddyLeftPrintable
    376  1418		       91 f3		      sta	(colorcursor),y
    377  141a		       a9 0c		      lda	#baddyRightPrintable
    378  141c		       c8		      iny
    379  141d		       91 f3		      sta	(colorcursor),y
    380  141f
    381  141f							; then the bottom
    382  141f		       a0 16		      ldy	#22
    383  1421				   .drawBottomOnly
    384  1421		       a9 06		      lda	#baddyBottomLeftPrintable
    385  1423		       91 f3		      sta	(colorcursor),y
    386  1425		       a9 0d		      lda	#baddyBottomRightPrintable
    387  1427		       c8		      iny
    388  1428		       91 f3		      sta	(colorcursor),y
    389  142a				   .notDrawNextBaddy
    390  142a		       a0 16		      ldy	#22
    391  142c		       4c ac 13 	      jmp	.doneChange
    392  142f
    393  142f				   updatePeriodic subroutine		; returns with zero flag set if fuel exhausted
    394  142f		       20 6a 14 	      jsr	increaseScoreAndProgress
    395  1432		       a9 01		      lda	#1	; clear zero flag
    396  1434		       60		      rts
    397  1435
    398  1435				   updateBonuses subroutine
    399  1435							; update the fuel and bonus indicator
    400  1435		       a6 b2		      ldx	fuel
    401  1437		       e0 00		      cpx	#0
    402  1439		       f0 0e		      beq	.zero
    403  143b		       e0 10		      cpx	#16
    404  143d		       30 02		      bmi	.gotValue
    405  143f		       a2 10		      ldx	#16	; max value printable
    406  1441				   .gotValue
    407  1441		       a9 04		      lda	#disabled
    408  1443		       9d 00 94 	      sta	colorstart,x
    409  1446		       a9 01		      lda	#enabled
    410  1448				   .loop
    411  1448		       ca		      dex
    412  1449				   .zero
    413  1449		       9d 00 94 	      sta	colorstart,x
    414  144c		       e0 00		      cpx	#0
    415  144e		       d0 f8		      bne	.loop
    416  1450		       60		      rts
    417  1451
    418  1451				   decreaseFuel subroutine
    419  1451		       a9 00		      lda	#0
    420  1453		       c5 b2		      cmp	fuel
    421  1455		       f0 12		      beq	.doneIncrease2
    422  1457		       c6 b2		      dec	fuel
    423  1459		       4c 66 14 	      jmp	.doneIncrease
    424  145c
    425  145c				   increaseFuel
    426  145c							; draw fuel on screen
    427  145c		       a2 08		      ldx	#8	; digit number 3, plus "SCORE" text
    428  145e
    429  145e		       a9 ff		      lda	#255
    430  1460		       c5 b2		      cmp	fuel
    431  1462		       f0 02		      beq	.doneIncrease	; already full
    432  1464
    433  1464		       e6 b2		      inc	fuel
    434  1466				   .doneIncrease
    435  1466		       20 35 14 	      jsr	updateBonuses
    436  1469				   .doneIncrease2
    437  1469		       60		      rts
    438  146a
    439  146a							; Increase score by one and update the onscreen counter
    440  146a				   increaseScoreAndProgress subroutine
    441  146a							; now decrease progress counter. If reached zero, move to next level before returning
    442  146a		       a6 8c		      ldx	progressCounterLo
    443  146c		       ca		      dex
    444  146d		       86 8c		      stx	progressCounterLo
    445  146f		       e0 23		      cpx	#35	; near end of level?
    446  1471		       d0 0a		      bne	.notNearEnd
    447  1473		       a5 8b		      lda	progressCounterHi
    448  1475		       c9 01		      cmp	#1
    449  1477		       d0 04		      bne	.notNearEnd
    450  1479							; near end of level. Set gap length between towers
    451  1479		       a9 29		      lda	#41	; more than a screen
    452  147b		       85 92		      sta	distanceBetweenTowers
    453  147d				   .notNearEnd
    454  147d		       e0 00		      cpx	#0
    455  147f		       d0 07		      bne	.doneProgress
    456  1481		       c6 8b		      dec	progressCounterHi
    457  1483		       d0 03		      bne	.doneProgress
    458  1485		       20 af 14 	      jsr	increaseLevel
    459  1488				   .doneProgress
    460  1488				   increaseScore
    461  1488							; now increase score
    462  1488
    463  1488							; increase the digits on screen
    464  1488		       a9 ba		      lda	#58 + 128	; '9' + 1
    465  148a		       a2 15		      ldx	#21	; position of score digits from the start of screen memory
    466  148c				   increaseDigits
    467  148c		       fe 00 10 	      inc	screenstart,x
    468  148f		       dd 00 10 	      cmp	screenstart,x
    469  1492		       d0 0c		      bne	.doneIncreaseDigits
    470  1494		       a9 b0		      lda	#48 + 128	; '0'
    471  1496		       9d 00 10 	      sta	screenstart,x
    472  1499		       a9 ba		      lda	#58 + 128	; '9' + 1
    473  149b		       ca		      dex
    474  149c		       e0 10		      cpx	#21 - 5	; reached the last digit?
    475  149e		       d0 ec		      bne	increaseDigits
    476  14a0				   .doneIncreaseDigits
    477  14a0		       60		      rts
    478  14a1
    479  14a1				   increaseScoreBy10
    480  14a1		       a9 ba		      lda	#58 + 128
    481  14a3		       a2 14		      ldx	#20
    482  14a5		       4c 8c 14 	      jmp	increaseDigits
    483  14a8
    484  14a8				   increaseScoreBy100
    485  14a8		       a9 ba		      lda	#58 + 128
    486  14aa		       a2 13		      ldx	#19
    487  14ac		       4c 8c 14 	      jmp	increaseDigits
    488  14af
    489  14af				   increaseLevel subroutine
    490  14af		       20 61 1a 	      jsr	powerUp
    491  14b2		       ae 70 12 	      ldx	levelNumber
    492  14b5		       e8		      inx
    493  14b6		       e0 07		      cpx	#maxLevel
    494  14b8		       d0 13		      bne	.doneIncrease
    495  14ba		       a2 00		      ldx	#0	; back to first level, but increase speed
    496  14bc
    497  14bc							; Increase speed
    498  14bc		       a5 8e		      lda	minShipDx
    499  14be		       18		      clc
    500  14bf		       69 14		      adc	#amountToIncreaseSpeedBy
    501  14c1		       90 02		      bcc	.notSpeedWrapAround
    502  14c3		       a9 ff		      lda	#255
    503  14c5				   .notSpeedWrapAround
    504  14c5		       85 8e		      sta	minShipDx
    505  14c7
    506  14c7							; increase rocket frequency
    507  14c7		       ee 74 12 	      inc	rocketProbability
    508  14ca		       ee 74 12 	      inc	rocketProbability
    509  14cd				   .doneIncrease
    510  14cd		       8e 70 12 	      stx	levelNumber
    511  14d0
    512  14d0		       20 51 15 	      jsr	setUpLevel
    513  14d3		       20 35 14 	      jsr	updateBonuses
    514  14d6		       60		      rts
    515  14d7
    516  14d7				   onceOnlyInit subroutine
    517  14d7		       78		      sei		; don't need maskable interrupts
    518  14d8
    519  14d8		       a9 7f		      lda	#$7f
    520  14da		       8d 2e 91 	      sta	$912e	; disable interrupts
    521  14dd		       8d 2d 91 	      sta	$912d
    522  14e0		       8d 1e 91 	      sta	$911e	; disable non maskable interrupts from restore key
    523  14e3
    524  14e3		       ad 2e 91 	      lda	$912e
    525  14e6		       ad 2d 91 	      lda	$912d
    526  14e9
    527  14e9		       a9 08		      lda	#8
    528  14eb		       85 cc		      sta	scrollCounter
    529  14ed		       85 2b		      sta	lastFrameWasScroll
    530  14ef
    531  14ef							; make sure the screen memory is in the right place
    532  14ef		       a9 16		      lda	#22	; 22 for expanded VIC, 150 for unexpanded
    533  14f1		       8d 02 90 	      sta	36866
    534  14f4
    535  14f4		       a9 cf		      lda	#192+1+2+4+8	; 192+1+2+4+8 for expanded VIC, 240 normally for unexpanded, 255 for unexpanded with chars at 7168
    536  14f6		       8d 05 90 	      sta	36869
    537  14f9
    538  14f9		       a9 10		      lda	#$10	; default screen page. dec 30 for unexpanded vic
    539  14fb		       8d 88 02 	      sta	screenMemoryPage	; tell the kernel where the screen is. Must match the above.
    540  14fe
    541  14fe		       a9 50		      lda	#80
    542  1500		       8d 91 02 	      sta	$291	; disable case change
    543  1503
    544  1503		       20 ac 19 	      jsr	defineCharacters	;prepare UDGs
    545  1506
    546  1506		       a9 00		      lda	#0
    547  1508		       8d 70 12 	      sta	levelNumber
    548  150b		       8d 13 91 	      sta	joystickDDR1	; prepare for joystick input
    549  150e
    550  150e		       20 a1 16 	      jsr	prepareTowerPositions
    551  1511		       60		      rts
    552  1512
    553  1512				   init       subroutine
    554  1512		       20 a8 1b 	      jsr	resetScroll	;
    555  1515		       20 ad 19 	      jsr	setUpSound
    556  1518
    557  1518		       a9 06		      lda	#6	; set ship start position
    558  151a		       85 ab		      sta	shipx
    559  151c		       a9 0a		      lda	#10
    560  151e		       85 fe		      sta	shipy
    561  1520
    562  1520							; clear screen and display score
    563  1520		       a9 1c		      lda	#<welcome
    564  1522		       85 fb		      sta.z	cursor	;
    565  1524		       a9 12		      lda	#>welcome
    566  1526		       85 fc		      sta.z	cursor + 1
    567  1528		       20 f8 15 	      jsr	printline
    568  152b
    569  152b		       20 db 15 	      jsr	createBottomOfScreen
    570  152e
    571  152e		       a9 00		      lda	#0
    572  1530		       85 cf		      sta	shipdy
    573  1532		       8d 9c 16 	      sta	towerheight
    574  1535
    575  1535		       a9 00		      lda	#0	; start with no fuel
    576  1537		       85 b2		      sta	fuel
    577  1539		       8d 73 12 	      sta	flags
    578  153c
    579  153c		       a9 08		      lda	#8
    580  153e		       85 cc		      sta	scrollCounter
    581  1540		       85 2b		      sta	lastFrameWasScroll
    582  1542
    583  1542		       a9 04		      lda	#4
    584  1544		       8d 9d 16 	      sta	fuelColumn
    585  1547
    586  1547		       a9 10		      lda	#16	; give some space at the start of the level
    587  1549		       8d a0 16 	      sta	towercolumnsleft
    588  154c
    589  154c		       a9 04		      lda	#fuelLeftPrintable
    590  154e		       8d 9f 16 	      sta	fuelChar
    591  1551
    592  1551							; Set up current level
    593  1551				   setUpLevel
    594  1551		       ae 70 12 	      ldx	levelNumber
    595  1554		       20 3d 1b 	      jsr	setupTowerCharacters	; also sets up constants
    596  1557
    597  1557		       a9 20		      lda	#spacePrintable	; ship hasn't collided with anything yet
    598  1559		       85 a5		      sta	charReplaced
    599  155b
    600  155b		       60		      rts
    601  155c
    602  155c		       00 03	   defaultBackground equ	3
    603  155c		       00 05	   lowerBackground equ	5
    604  155c		       00 ff	   changeNormalColor equ	255
    605  155c		       00 fe	   changeBackgroundColor equ	254
    606  155c
    607  155c							; Local variables to backgroundMap, and don't need to be in zero page as they are
    608  155c							; only used infrequently
    609  155c		       00	   ycoord     dc	0
    610  155d		       00	   xcoord     dc	0
    611  155e
    612  155e		       00	   color0     dc	0	; written for a 0 bit in the background map
    613  155f		       00	   color1     dc	0	; written for a 1 bit in the background map
    614  1560		       00	   bgOrfg     dc	0	; bg = 0; fg = 1
    615  1561
    616  1561							; sets up background colours
    617  1561							; start by loading x with the index of the colour map, starting at zero
    618  1561
    619  1561				   prepareColors subroutine
    620  1561		       a9 88		      lda	#<backgroundMap	; use cursor to point to backgroundMap position
    621  1563		       85 fb		      sta.z	cursor
    622  1565		       a9 1d		      lda	#>backgroundMap
    623  1567		       85 fc		      sta.z	cursor + 1
    624  1569		       a0 00		      ldy	#0	; start at the beginning of the maps
    625  156b				   .findLoop
    626  156b							; seek to the right map
    627  156b		       e0 00		      cpx	#0
    628  156d		       f0 0b		      beq	.foundMap
    629  156f		       20 d2 15 	      jsr	.nextInstruction
    630  1572		       c9 fd		      cmp	#253	; end of map?
    631  1574		       d0 f5		      bne	.findLoop
    632  1576		       ca		      dex		; found end of current map
    633  1577		       4c 6b 15 	      jmp	.findLoop
    634  157a				   .foundMap
    635  157a		       a9 94		      lda	#colorstarthigh	; use colorcursor to point to screen position in colour map
    636  157c		       85 f4		      sta.z	colorcursor + 1
    637  157e		       a9 00		      lda	#0
    638  1580		       85 f3		      sta.z	colorcursor
    639  1582		       a2 01		      ldx	#1
    640  1584		       8e 60 15 	      stx	bgOrfg
    641  1587				   .switchbgfg
    642  1587		       ad 60 15 	      lda	bgOrfg
    643  158a		       49 01		      eor	#1
    644  158c		       8d 60 15 	      sta	bgOrfg
    645  158f				   .readloop
    646  158f		       20 d2 15 	      jsr	.nextInstruction
    647  1592		       c9 ff		      cmp	#255
    648  1594		       d0 09		      bne	.not1
    649  1596		       20 d2 15 	      jsr	.nextInstruction
    650  1599		       8d 5e 15 	      sta	color0	; store as background color
    651  159c		       4c 8f 15 	      jmp	.readloop
    652  159f				   .not1
    653  159f		       c9 fe		      cmp	#254
    654  15a1		       d0 09		      bne	.not2
    655  15a3		       20 d2 15 	      jsr	.nextInstruction
    656  15a6		       8d 5f 15 	      sta	color1	; store as foreground color
    657  15a9		       4c 8f 15 	      jmp	.readloop
    658  15ac				   .not2
    659  15ac		       c9 fd		      cmp	#253	; end marker
    660  15ae		       f0 21		      beq	.finished
    661  15b0
    662  15b0		       aa		      tax
    663  15b1		       a9 00		      lda	#0
    664  15b3		       cd 60 15 	      cmp	bgOrfg
    665  15b6		       d0 06		      bne	.fg
    666  15b8		       ad 5e 15 	      lda	color0
    667  15bb		       4c c1 15 	      jmp	.outloop
    668  15be				   .fg
    669  15be		       ad 5f 15 	      lda	color1
    670  15c1				   .outloop
    671  15c1		       e0 00		      cpx	#0
    672  15c3		       f0 c2		      beq	.switchbgfg	; swap background and foreground, and get next instruction
    673  15c5		       91 f3		      sta	(colorcursor),y	; y = 0
    674  15c7
    675  15c7							; colorcursor+=1
    676  15c7		       e6 f3		      inc.z	colorcursor
    677  15c9		       d0 02		      bne	.doneIncColorCursor
    678  15cb		       e6 f4		      inc.z	colorcursor + 1
    679  15cd				   .doneIncColorCursor
    680  15cd		       ca		      dex
    681  15ce		       4c c1 15 	      jmp	.outloop
    682  15d1				   .finished
    683  15d1		       60		      rts
    684  15d2				   .nextInstruction
    685  15d2		       b1 fb		      lda	(cursor),y
    686  15d4							; cursor+=1
    687  15d4		       e6 fb		      inc.z	cursor
    688  15d6		       d0 02		      bne	.doneIncCursor
    689  15d8		       e6 fc		      inc.z	cursor + 1
    690  15da				   .doneIncCursor
    691  15da		       60		      rts
    692  15db
    693  15db				   createBottomOfScreen subroutine
    694  15db		       a2 16		      ldx	#22
    695  15dd		       a0 16		      ldy	#22
    696  15df		       a9 11		      lda	#bottomBlockPrintable
    697  15e1		       85 a4		      sta	character
    698  15e3		       20 53 16 	      jsr	drawchar	; draw the first one
    699  15e6		       a0 16		      ldy	#22	; number left to go
    700  15e8		       a9 01		      lda	#1	; number of spaces to subtract
    701  15ea		       85 a6		      sta	diff
    702  15ec				   .loop
    703  15ec		       88		      dey
    704  15ed		       20 90 16 	      jsr	subcursor
    705  15f0		       20 7b 16 	      jsr	storechar
    706  15f3		       c0 00		      cpy	#0
    707  15f5		       d0 f5		      bne	.loop
    708  15f7		       60		      rts
    709  15f8
    710  15f8				   printline  subroutine
    711  15f8		       a0 00		      ldy	#0
    712  15fa				   .loop
    713  15fa		       b1 fb		      lda	(cursor),y
    714  15fc		       c9 00		      cmp	#0
    715  15fe		       f0 07		      beq	.done
    716  1600		       20 d2 ff 	      jsr	CHROUT
    717  1603		       c8		      iny
    718  1604		       4c fa 15 	      jmp	.loop
    719  1607				   .done
    720  1607		       60		      rts
    721  1608
    722  1608				   scroll     subroutine
    723  1608							; not yet drawn ship. Indicate this by setting the replacedChar with 255 (invalid value it will never encounter)
    724  1608		       a9 ff		      lda	#255
    725  160a		       85 a5		      sta	charReplaced
    726  160c
    727  160c		       18		      clc
    728  160d		       a2 10		      ldx	#screenstarthigh	; put start of screen hi in cursor position
    729  160f		       a0 16		      ldy	#22	; screen scroll start lo
    730  1611		       86 fc		      stx.z	cursor + 1
    731  1613		       84 fb		      sty.z	cursor
    732  1615		       a0 00		      ldy	#0	; current *X* position
    733  1617		       a2 00		      ldx	#0	; number of current line
    734  1619				   .lineLoop
    735  1619		       c8		      iny		; (2) cycles. Gain 4
    736  161a		       b1 fb		      lda	(cursor),y	; (5+) get existing character. Absolute addressing would be (4)
    737  161c		       88		      dey		; (2)
    738  161d		       91 fb		      sta	(cursor),y	; (6) store in previous location. Absolute addressing would be (4)
    739  161f		       c8		      iny		; (2)
    740  1620		       c0 15		      cpy	#21	; (2)
    741  1622				   .2			; .1 to .2 : 19+ originally
    742  1622		       d0 f5		      bne	.lineLoop	; (2) continue within line
    743  1624
    744  1624							; copy in the next line from the buffer
    745  1624		       b5 00		      lda	nextLine,x
    746  1626		       91 fb		      sta	(cursor),y
    747  1628
    748  1628							; is it time to draw the ship?
    749  1628		       e4 fe		      cpx	shipy
    750  162a		       30 11		      bmi	.notDrawShip
    751  162c		       a5 a5		      lda	charReplaced
    752  162e		       c9 ff		      cmp	#255
    753  1630		       d0 0b		      bne	.notDrawShip	; already drawn it
    754  1632		       8a		      txa
    755  1633		       48		      pha
    756  1634		       98		      tya
    757  1635		       48		      pha
    758  1636		       20 3f 18 	      jsr	drawship
    759  1639		       68		      pla
    760  163a		       a8		      tay
    761  163b		       68		      pla
    762  163c		       aa		      tax
    763  163d				   .notDrawShip
    764  163d
    765  163d							; move to next line
    766  163d		       a0 00		      ldy	#0	; (2) reset back to start of line counter
    767  163f		       e8		      inx		; (2) next line
    768  1640		       e0 15		      cpx	#screenHeight - 3
    769  1642		       f0 0e		      beq	.finished	; (3) or (4) if page boundary crossed
    770  1644
    771  1644
    772  1644		       a5 fb		      lda.z	cursor	; (3)
    773  1646		       18		      clc		; (2)
    774  1647		       69 16		      adc	#22	; (2)
    775  1649		       85 fb		      sta.z	cursor	; (3)
    776  164b		       90 cc		      bcc	.lineLoop	; (3) or (4) continue with next line
    777  164d		       e6 fc		      inc.z	cursor + 1	; (5)
    778  164f		       4c 19 16 	      jmp	.lineLoop	;  (3) continue with next line
    779  1652				   .finished
    780  1652		       60		      rts		; done
    781  1653
    782  1653							;;;; Draw a character at the given x and y coordinates
    783  1653							; x coord		x
    784  1653							; y coord		y
    785  1653
    786  1653				   drawchar   subroutine
    787  1653							;; initialise values
    788  1653		       a9 10		      lda	#screenstarthigh
    789  1655		       85 fc		      sta.z	cursor + 1
    790  1657		       a9 94		      lda	#colorstarthigh
    791  1659		       85 f4		      sta.z	colorcursor + 1
    792  165b		       18		      clc
    793  165c		       8a		      txa		; x coord to screen low byte
    794  165d
    795  165d		       b0 0a	   .1	      bcs	.2	; overflowed page?
    796  165f		       c0 00	   .1ret      cpy	#$00	; no further y offset?
    797  1661		       f0 0e		      beq	.3
    798  1663		       69 15		      adc	#screenwidth - 1	; not sure why I need this -1
    799  1665		       88		      dey
    800  1666		       4c 5d 16 	      jmp	.1	;
    801  1669
    802  1669		       18	   .2	      clc
    803  166a		       e6 fc		      inc.z	cursor + 1	; next screen page
    804  166c		       e6 f4		      inc.z	colorcursor + 1	; and color cursor
    805  166e		       4c 5f 16 	      jmp	.1ret
    806  1671
    807  1671		       85 fb	   .3	      sta.z	cursor	; got final low byte value
    808  1673		       85 f3		      sta.z	colorcursor	; and the color cursor
    809  1675
    810  1675				   storeCharSaveReplaced
    811  1675		       a2 00		      ldx	#0
    812  1677		       a1 fb		      lda	(cursor),x	; get character about to be replaced
    813  1679		       85 a5		      sta	charReplaced
    814  167b
    815  167b		       a2 00	   storechar  ldx	#0	; offset to allow indirect addressing -- should really use zero page
    816  167d		       a5 a4		      lda	character	; char to print
    817  167f							; if it's 255, don't draw
    818  167f		       c9 ff		      cmp	#255
    819  1681		       f0 02		      beq	.done
    820  1683		       81 fb		      sta	(cursor),x
    821  1685				   .done
    822  1685		       60		      rts
    823  1686
    824  1686				   addcursor  subroutine
    825  1686		       18		      clc
    826  1687		       65 fb		      adc.z	cursor
    827  1689		       85 fb		      sta.z	cursor
    828  168b		       90 02		      bcc	.1
    829  168d		       e6 fc		      inc.z	cursor + 1
    830  168f		       60	   .1	      rts
    831  1690
    832  1690				   subcursor  subroutine
    833  1690		       38		      sec
    834  1691		       a5 fb		      lda.z	cursor
    835  1693		       e5 a6		      sbc	diff
    836  1695		       85 fb		      sta.z	cursor
    837  1697		       b0 02		      bcs	.1
    838  1699		       c6 fc		      dec.z	cursor + 1
    839  169b		       60	   .1	      rts
    840  169c
    841  169c							;;;; Draw a tower at the right hand side of the screen
    842  169c		       00	   towerheight dc	0
    843  169d
    844  169d		       84	   fuelColumn dc	128 + 4	; set MSB to indicate will not be drawn. Reset bit when drawing next tower
    845  169e		       0a	   fuelRow    dc	10	; height above the ground or tower
    846  169f		       03	   fuelChar   dc	3
    847  16a0		       10	   towercolumnsleft dc	16
    848  16a1
    849  16a1				   prepareTowerPositions subroutine
    850  16a1		       a0 15		      ldy	#nextLineLength - 1
    851  16a3		       a9 20		      lda	#spacePrintable
    852  16a5				   .loop
    853  16a5		       99 00 00 	      sta	nextLine,y
    854  16a8		       c0 00		      cpy	#0
    855  16aa		       f0 04		      beq	.done
    856  16ac		       88		      dey
    857  16ad		       4c a5 16 	      jmp	.loop
    858  16b0				   .done
    859  16b0		       60		      rts
    860  16b1
    861  16b1
    862  16b1							; color and colorcharacter already set
    863  16b1							; towerMiddleCharacter already set for the non-top/bottom character, and also in a
    864  16b1							; towerTopCharacter already set
    865  16b1
    866  16b1							; prepares nextLine with a line to copy in during the next scroll
    867  16b1				   drawtowerScope subroutine
    868  16b1				   .shortTower
    869  16b1		       c0 00		      cpy	#0
    870  16b3		       d0 07		      bne	.not0
    871  16b5		       a9 20		      lda	#spacePrintable
    872  16b7		       85 93		      sta	towerMiddleCharacter
    873  16b9		       4c d4 16 	      jmp	.draw
    874  16bc				   .not0
    875  16bc		       a5 96		      lda	towerTopCharacter
    876  16be		       4c d4 16 	      jmp	.draw
    877  16c1				   .switchToTopCharacter
    878  16c1		       a5 96		      lda	towerTopCharacter	; use this next
    879  16c3		       85 a4		      sta	character
    880  16c5		       88		      dey
    881  16c6		       d0 18		      bne	.1
    882  16c8		       4c ea 16 	      jmp	.drawnBottom
    883  16cb				   drawtower
    884  16cb							;; If the tower is zero height, draw a space at the bottom and then draw a gap full height
    885  16cb							;; if the screen
    886  16cb		       85 a4		      sta	character
    887  16cd		       ac 9c 16 	      ldy	towerheight
    888  16d0		       c0 03		      cpy	#3	; One high, so print the top character instead of the middle
    889  16d2		       30 dd		      bmi	.shortTower
    890  16d4				   .draw
    891  16d4							;; draw first block at bottom right, then build up from there
    892  16d4		       a2 15		      ldx	#nextLineLength - 1
    893  16d6		       ac 9c 16 	      ldy	towerheight
    894  16d9		       c0 00		      cpy	#0
    895  16db		       f0 0d		      beq	.drawnBottom
    896  16dd		       88		      dey		; subtract one from tower height as bottom character is never drawn
    897  16de		       f0 0a		      beq	.drawnBottom	; finished drawing bottom of tower?
    898  16e0		       ca	   .1	      dex
    899  16e1				   .subfinished
    900  16e1		       95 00		      sta	nextLine,x
    901  16e3				   .storecharcomplete1
    902  16e3		       c0 02		      cpy	#2	;[2]
    903  16e5		       f0 da		      beq	.switchToTopCharacter	;[2,3]
    904  16e7		       88		      dey		;[2]
    905  16e8		       d0 f6		      bne	.1	;[3,2]
    906  16ea
    907  16ea				   .drawnBottom 		; now draw the gap
    908  16ea		       a4 8f		      ldy	gapWidth
    909  16ec		       ad 9c 16 	      lda	towerheight	; if tower height is zero, don't draw the top
    910  16ef		       c9 00		      cmp	#0
    911  16f1		       d0 02		      bne	.readyToDrawGap
    912  16f3		       a0 15		      ldy	#screenheight - 2
    913  16f5				   .readyToDrawGap
    914  16f5		       a9 20		      lda	#spacePrintable
    915  16f7		       85 a4		      sta	character
    916  16f9		       c0 00		      cpy	#0
    917  16fb		       f0 73	   .3	      beq	.drawnGap
    918  16fd		       ca		      dex		; one line up
    919  16fe				   .subfinished2
    920  16fe		       a5 a4		      lda	character	; TODO, see if we can remove the need to do this
    921  1700		       95 00		      sta	nextLine,x
    922  1702		       e0 00		      cpx	#0
    923  1704		       f0 7d		      beq	.doneTower
    924  1706
    925  1706				   .storecharcomplete2
    926  1706		       ad a0 16 	      lda	towercolumnsleft
    927  1709		       cd 9d 16 	      cmp	fuelColumn
    928  170c		       d0 48		      bne	.305
    929  170e
    930  170e							; is this the row to print the fuel at?
    931  170e		       cc 9e 16 	      cpy	fuelRow
    932  1711		       d0 43		      bne	.305	; not yet right height to print fuel
    933  1713
    934  1713							; print fuel
    935  1713		       ad 9f 16 	      lda	fuelChar	; this is variable, as we may be drawing the first or second character
    936  1716		       95 00		      sta	nextLine,x
    937  1718				   .storecharcomplete3
    938  1718
    939  1718							; do we need to print the second edge?
    940  1718		       ad 9f 16 	      lda	fuelChar
    941  171b		       c9 04		      cmp	#fuelLeftPrintable
    942  171d		       f0 3b		      beq	.switchToRight1
    943  171f		       c9 05		      cmp	#baddyLeftPrintable
    944  1721		       f0 42		      beq	.switchToRight2
    945  1723
    946  1723							; switch to printing the left edge again and choose the position for
    947  1723							; the next fuel character
    948  1723
    949  1723							; work out the row
    950  1723		       20 ed 17 	      jsr	random
    951  1726		       29 0f		      and	#$0f
    952  1728		       18		      clc
    953  1729		       69 03		      adc	#$3
    954  172b		       8d 9e 16 	      sta	fuelRow
    955  172e
    956  172e		       20 ed 17 	      jsr	random
    957  1731		       29 07		      and	#$7
    958  1733		       cd 74 12 	      cmp	rocketProbability
    959  1736		       10 0a		      bpl	.nextIsFuel
    960  1738
    961  1738		       a9 14		      lda	#screenHeight - 4
    962  173a		       8d 9e 16 	      sta	fuelRow
    963  173d
    964  173d		       a9 05		      lda	#baddyLeftPrintable
    965  173f		       4c 44 17 	      jmp	.gotNext
    966  1742				   .nextIsFuel
    967  1742		       a9 04		      lda	#fuelLeftPrintable
    968  1744				   .gotNext
    969  1744		       8d 9f 16 	      sta	fuelChar
    970  1747							;				jsr random
    971  1747		       a9 06		      lda	#6
    972  1749		       29 07		      and	#$7	; random number 0 to 7
    973  174b		       09 80		      ora	#$80	; set MSB to delay drawing until after next tower
    974  174d		       c9 87		      cmp	#$87
    975  174f		       d0 02		      bne	.not7
    976  1751		       a9 03		      lda	#3	; replace a 0 with a 3 to put the fuel between towers not just before a tower
    977  1753				   .not7
    978  1753		       8d 9d 16 	      sta	fuelColumn
    979  1756
    980  1756				   .305
    981  1756		       88		      dey
    982  1757		       4c fb 16 	      jmp	.3
    983  175a				   .switchToRight1
    984  175a		       a9 0b		      lda	#fuelRightPrintable
    985  175c		       8d 9f 16 	      sta	fuelChar
    986  175f		       ce 9d 16 	      dec	fuelColumn	; set to print the right hand edge next column
    987  1762		       4c 56 17 	      jmp	.305
    988  1765				   .switchToRight2
    989  1765		       a9 0c		      lda	#baddyRightPrintable
    990  1767		       8d 9f 16 	      sta	fuelChar
    991  176a		       ce 9d 16 	      dec	fuelColumn	; set to print the right hand edge next column
    992  176d		       4c 56 17 	      jmp	.305
    993  1770				   .drawnGap
    994  1770							; now draw the the top part
    995  1770		       a0 01		      ldy	#1	; draw 1 top character then switch to middle
    996  1772		       a5 8a		      lda	topTowerEdgeCharacter
    997  1774				   .4
    998  1774		       95 00		      sta	nextLine,x
    999  1776		       e0 00		      cpx	#0
   1000  1778		       f0 09		      beq	.5
   1001  177a		       ca		      dex
   1002  177b		       88		      dey
   1003  177c		       d0 f6		      bne	.4
   1004  177e		       a5 89		      lda	topTowerMiddleCharacter
   1005  1780		       4c 74 17 	      jmp	.4
   1006  1783				   .5
   1007  1783				   .doneTower
   1008  1783		       60		      rts
   1009  1784
   1010  1784		       00 04	   defaulttowerwidth equ	4
   1011  1784
   1012  1784		       00 04	   bottomscreencharacter equ	4
   1013  1784		       00 06	   fuelcharacter equ	6
   1014  1784
   1015  1784							;;;; Draw next right hand line of screen
   1016  1784				   drawline   subroutine
   1017  1784		       a9 00		      lda	#0
   1018  1786		       cd a0 16 	      cmp	towercolumnsleft
   1019  1789		       d0 2c		      bne	.drawit
   1020  178b
   1021  178b							; work out next tower height
   1022  178b		       ad 9c 16 	      lda	towerheight
   1023  178e		       c9 00		      cmp	#0
   1024  1790		       d0 46		      bne	.gap
   1025  1792
   1026  1792							; if we are nearly at the end of the level, draw no more towers, so just
   1027  1792							; have a big gap
   1028  1792		       a5 8b		      lda	progressCounterHi
   1029  1794		       c9 00		      cmp	#0
   1030  1796		       d0 0b		      bne	.doneCheckEndLevel
   1031  1798		       a5 8c		      lda	progressCounterLo
   1032  179a		       c9 32		      cmp	#50	; one screen worth left?
   1033  179c		       30 05		      bmi	.doneCheckEndLevel
   1034  179e		       a9 00		      lda	#0	; tower height zero, i.e. no tower as at end of level
   1035  17a0		       4c a8 17 	      jmp	.chosenTowerHeight
   1036  17a3				   .doneCheckEndLevel
   1037  17a3		       20 ed 17 	      jsr	random
   1038  17a6		       29 0f		      and	#$0f
   1039  17a8				   .chosenTowerHeight
   1040  17a8		       8d 9c 16 	      sta	towerheight
   1041  17ab		       c9 0f		      cmp	#$0f
   1042  17ad		       d0 03		      bne	.notdec
   1043  17af		       ce 9c 16 	      dec	towerheight
   1044  17b2				   .notdec
   1045  17b2		       a9 04		      lda	#defaulttowerwidth
   1046  17b4		       8d a0 16 	      sta	towercolumnsleft
   1047  17b7				   .drawit
   1048  17b7		       ce a0 16 	      dec	towercolumnsleft
   1049  17ba		       ad 9c 16 	      lda	towerheight
   1050  17bd		       c9 00		      cmp	#0
   1051  17bf		       f0 13		      beq	.drawit1
   1052  17c1		       ae a0 16 	      ldx	towercolumnsleft
   1053  17c4		       b5 1f		      lda	towerTopCharacters,x	; character to draw at top edge of towers (around the gap)
   1054  17c6		       85 96		      sta	towerTopCharacter
   1055  17c8		       b5 1b		      lda	towercharacters,x	;
   1056  17ca		       85 93		      sta	towerMiddleCharacter
   1057  17cc		       b5 27		      lda	topTowerEdgeCharacters,x	; character to draw at bottom edge of towers (around the gap)
   1058  17ce		       85 8a		      sta	topTowerEdgeCharacter
   1059  17d0		       b5 23		      lda	topTowerCharacters,x	;
   1060  17d2		       85 89		      sta	topTowerMiddleCharacter
   1061  17d4		       20 cb 16    .drawit1   jsr	drawtower
   1062  17d7		       60		      rts
   1063  17d8
   1064  17d8		       a5 92	   .gap       lda	distanceBetweenTowers
   1065  17da		       8d a0 16 	      sta	towercolumnsleft
   1066  17dd		       a9 00		      lda	#0
   1067  17df		       8d 9c 16 	      sta	towerheight
   1068  17e2
   1069  17e2							; allow fuel to be drawn from now on
   1070  17e2		       ad 9d 16 	      lda	fuelColumn
   1071  17e5		       29 7f		      and	#$7f
   1072  17e7		       8d 9d 16 	      sta	fuelColumn
   1073  17ea		       4c b7 17 	      jmp	.drawit
   1074  17ed
   1075  17ed							;;;; Random number generator
   1076  17ed				   random     subroutine
   1077  17ed		       ad 71 12 	      lda	randseed
   1078  17f0		       6a		      ror
   1079  17f1		       6a		      ror
   1080  17f2		       6a		      ror
   1081  17f3		       4d 71 12 	      eor	randseed
   1082  17f6		       ed 72 12 	      sbc	randseed + 1
   1083  17f9		       2a		      rol
   1084  17fa		       2a		      rol
   1085  17fb		       2a		      rol
   1086  17fc		       8d 72 12 	      sta	randseed + 1
   1087  17ff		       2a		      rol
   1088  1800		       4d 71 12 	      eor	randseed
   1089  1803		       6d 72 12 	      adc	randseed + 1
   1090  1806		       ee 71 12 	      inc	randseed
   1091  1809		       8d 71 12 	      sta	randseed
   1092  180c		       60		      rts
   1093  180d
   1094  180d							; wait for raster to enter border
   1095  180d				   rasterdelay
   1096  180d							;				lda #3
   1097  180d							;				sta borderPaper
   1098  180d				   .rasterloop
   1099  180d		       ad 04 90 	      lda	rasterline
   1100  1810		       c9 83		      cmp	#131	; TODO: different value for NTSC, probably lower
   1101  1812		       10 f9		      bpl	.rasterloop
   1102  1814
   1103  1814							;				lda #0
   1104  1814							;				sta borderPaper
   1105  1814				   .rasterLowerLoop
   1106  1814
   1107  1814		       ad 04 90 	      lda	rasterline
   1108  1817		       c9 82		      cmp	#130	;130; TODO: different value for NTSC, probably lower
   1109  1819		       30 f2		      bmi	.rasterloop
   1110  181b
   1111  181b							;				lda #1
   1112  181b							;				sta borderPaper
   1113  181b		       60		      rts
   1114  181c
   1115  181c				   workOutShipPosition
   1116  181c		       a6 ab		      ldx	shipx
   1117  181e		       a4 fe		      ldy	shipy
   1118  1820		       a9 ff		      lda	#255	; don't draw
   1119  1822		       85 a4		      sta	character
   1120  1824		       20 53 16 	      jsr	drawchar
   1121  1827
   1122  1827		       a5 fb		      lda	cursor
   1123  1829		       85 17		      sta	shipToBeDrawnAt1
   1124  182b		       a5 fc		      lda	cursor + 1
   1125  182d		       85 18		      sta	shipToBeDrawnAt1 + 1
   1126  182f
   1127  182f		       a9 16		      lda	#screenwidth
   1128  1831		       85 a6		      sta	diff
   1129  1833		       20 86 16 	      jsr	addcursor
   1130  1836
   1131  1836		       a5 fb		      lda	cursor
   1132  1838		       85 19		      sta	shipToBeDrawnAt2
   1133  183a		       a5 fc		      lda	cursor + 1
   1134  183c		       85 1a		      sta	shipToBeDrawnAt2 + 1
   1135  183e		       60		      rts
   1136  183f
   1137  183f				   drawship		; work out ship offset in pixels from 0 to 7. Take top 3 bits of minor Y value
   1138  183f		       a5 fd		      lda	shipMinorY
   1139  1841		       4a		      lsr
   1140  1842		       4a		      lsr
   1141  1843		       4a		      lsr
   1142  1844		       4a		      lsr
   1143  1845		       4a		      lsr
   1144  1846		       18		      clc
   1145  1847
   1146  1847		       a6 aa		      ldx	shipDirection
   1147  1849		       e0 ff		      cpx	#directionUp
   1148  184b		       f0 07		      beq	.goingUp
   1149  184d		       69 21		      adc	#shipTopPrintable
   1150  184f		       85 a4		      sta	character
   1151  1851		       4c 60 18 	      jmp	drawshipchar
   1152  1854				   .goingUp
   1153  1854		       85 a4		      sta	character
   1154  1856		       a9 07		      lda	#7
   1155  1858		       38		      sec
   1156  1859		       e5 a4		      sbc	character
   1157  185b		       18		      clc
   1158  185c		       69 21		      adc	#shipTopPrintable
   1159  185e		       85 a4		      sta	character
   1160  1860
   1161  1860				   drawshipchar
   1162  1860		       a2 00		      ldx	#0
   1163  1862		       a1 17		      lda	(shipToBeDrawnAt1),x
   1164  1864		       85 97		      sta	charReplaced2	; store this for collision detection later
   1165  1866		       a5 a4		      lda	character
   1166  1868		       81 17		      sta	(shipToBeDrawnAt1),x
   1167  186a
   1168  186a		       c9 20		      cmp	#spacePrintable
   1169  186c		       f0 05		      beq	.keepSpace
   1170  186e		       18		      clc
   1171  186f		       69 08		      adc	#8	; bottom set are 8 bytes further on
   1172  1871		       85 a4		      sta	character
   1173  1873				   .keepSpace
   1174  1873		       a1 19		      lda	(shipToBeDrawnAt2),x
   1175  1875		       85 a5		      sta	charReplaced
   1176  1877		       a5 a4		      lda	character
   1177  1879		       81 19		      sta	(shipToBeDrawnAt2),x
   1178  187b		       60		      rts
   1179  187c
   1180  187c				   clearship
   1181  187c		       a2 00		      ldx	#0
   1182  187e		       a1 17		      lda	(shipToBeDrawnAt1),x
   1183  1880		       c9 21		      cmp	#shipTopPrintable
   1184  1882		       30 04		      bmi	.doneReplace1
   1185  1884		       a9 20		      lda	#spacePrintable
   1186  1886		       81 17		      sta	(shipToBeDrawnAt1),x
   1187  1888				   .doneReplace1
   1188  1888		       a1 19		      lda	(shipToBeDrawnAt2),x
   1189  188a		       c9 21		      cmp	#shipTopPrintable
   1190  188c		       30 04		      bmi	.doneReplace2
   1191  188e		       a9 20		      lda	#spacePrintable
   1192  1890		       81 19		      sta	(shipToBeDrawnAt2),x
   1193  1892				   .doneReplace2
   1194  1892		       60		      rts
   1195  1893
   1196  1893							;lda #spacePrintable
   1197  1893							;sta character
   1198  1893							;jmp drawshipchar
   1199  1893
   1200  1893				   control    subroutine
   1201  1893							; if crashing, no control
   1202  1893		       ad 73 12 	      lda	flags
   1203  1896		       29 01		      and	#crashing
   1204  1898		       d0 1c		      bne	.controlDone
   1205  189a							; scan keyboard for key presses or joystick
   1206  189a		       a9 00		      lda	#0
   1207  189c		       8d 20 91 	      sta	$9120	; reset keyboard state
   1208  189f
   1209  189f		       ad 11 91 	      lda	joystickIn1
   1210  18a2		       09 df		      ora	#255 - 32	; set all other bits. Only care about fire button
   1211  18a4		       2d 21 91 	      and	$9121	; get any 0 bits from keyboard state (indicates a key is pressed)
   1212  18a7
   1213  18a7		       a6 b3		      ldx	lastkey
   1214  18a9		       85 b3		      sta	lastkey
   1215  18ab
   1216  18ab		       e0 ff		      cpx	#255	; 255 indicates nothing is pressed
   1217  18ad		       d0 28		      bne	.notpress
   1218  18af
   1219  18af		       c9 ff		      cmp	#255
   1220  18b1		       f0 24		      beq	.notpress
   1221  18b3
   1222  18b3							; something just pressed
   1223  18b3		       4c b7 18 	      jmp	thrust
   1224  18b6				   .controlDone
   1225  18b6							; ignore
   1226  18b6		       60		      rts
   1227  18b7
   1228  18b7				   thrust
   1229  18b7		       a9 ff		      lda	#255
   1230  18b9		       85 cd		      sta	jetSound
   1231  18bb		       a9 64		      lda	#shipimpulse
   1232  18bd		       85 cf		      sta	shipdy
   1233  18bf		       18		      clc
   1234  18c0		       a9 1e		      lda	#30
   1235  18c2		       65 b1		      adc	shipdx
   1236  18c4		       90 02		      bcc	.storedx
   1237  18c6		       a9 ff		      lda	#255
   1238  18c8				   .storedx
   1239  18c8		       85 b1		      sta	shipdx
   1240  18ca
   1241  18ca		       a5 aa		      lda	shipDirection
   1242  18cc		       c9 ff		      cmp	#directionUp
   1243  18ce		       f0 07		      beq	.alreadyGoingUp
   1244  18d0		       a9 ff		      lda	#directionUp
   1245  18d2		       85 aa		      sta	shipDirection
   1246  18d4		       20 71 19 	      jsr	swapMinorY
   1247  18d7				   .alreadyGoingUp
   1248  18d7				   .notpress
   1249  18d7				   controlDone
   1250  18d7		       60		      rts
   1251  18d8
   1252  18d8		       00	   temp       dc.b	0
   1253  18d9		       00	   temp2      dc.b	0
   1254  18da
   1255  18da				   physics    subroutine
   1256  18da							; returns with zero flag set if end of game
   1257  18da
   1258  18da							; update horizontal position
   1259  18da		       a9 04		      lda	#4	; number of times to add the speed
   1260  18dc		       8d d8 18 	      sta	temp
   1261  18df				   .impulseLoop
   1262  18df		       a5 b0		      lda	shipMinorX
   1263  18e1		       18		      clc
   1264  18e2		       65 b1		      adc	shipdx
   1265  18e4		       85 b0		      sta	shipMinorX
   1266  18e6		       90 06		      bcc	.notSmoothScroll
   1267  18e8		       20 45 13 	      jsr	smoothScroll
   1268  18eb		       20 7e 13 	      jsr	handleFullScroll
   1269  18ee				   .notSmoothScroll
   1270  18ee		       ce d8 18 	      dec	temp
   1271  18f1		       d0 ec		      bne	.impulseLoop
   1272  18f3
   1273  18f3							; update ship x speed
   1274  18f3		       a0 01		      ldy	#1	; amount to reduce by
   1275  18f5		       a6 b1		      ldx	shipdx
   1276  18f7				   .dxloop
   1277  18f7		       e4 8e		      cpx	minShipDx
   1278  18f9		       f0 0c		      beq	.donedx
   1279  18fb
   1280  18fb							; speed up or slow down?
   1281  18fb		       e8		      inx
   1282  18fc		       e4 8e		      cpx	minShipDx
   1283  18fe		       10 02		      bpl	.doneDecrease
   1284  1900		       ca		      dex
   1285  1901		       ca		      dex
   1286  1902				   .doneDecrease
   1287  1902		       86 b1		      stx	shipdx
   1288  1904		       88		      dey
   1289  1905		       d0 f0		      bne	.dxloop
   1290  1907				   .donedx
   1291  1907							; update ship y position. First the minor position
   1292  1907		       a5 fd		      lda	shipMinorY
   1293  1909		       18		      clc
   1294  190a		       65 cf		      adc	shipdy
   1295  190c		       85 fd		      sta	shipMinorY
   1296  190e		       90 2e		      bcc	.doneShipPosition
   1297  1910
   1298  1910							; need to update major position, depending on the direction
   1299  1910		       a5 fe		      lda	shipy
   1300  1912		       18		      clc
   1301  1913		       65 aa		      adc	shipDirection
   1302  1915
   1303  1915							; check if hit top of screen, in which case we bounce
   1304  1915		       c9 01		      cmp	#1
   1305  1917		       10 0b		      bpl	.notTopBounce
   1306  1919		       a9 01		      lda	#directionDown
   1307  191b		       85 aa		      sta	shipDirection
   1308  191d
   1309  191d		       a9 01		      lda	#1
   1310  191f		       85 fd		      sta	shipMinorY
   1311  1921		       4c 3c 19 	      jmp	.doneBounce
   1312  1924				   .notTopBounce
   1313  1924		       c9 14		      cmp	#20	; hit bottom of screen?
   1314  1926		       30 14		      bmi	.doneBounce
   1315  1928
   1316  1928							; if we are crashing, now it's the end of the game
   1317  1928		       ad 73 12 	      lda	flags
   1318  192b		       29 01		      and	#crashing
   1319  192d		       d0 51		      bne	donePhysicsEndOfGame
   1320  192f		       a9 ff		      lda	#directionUp
   1321  1931		       85 aa		      sta	shipDirection
   1322  1933
   1323  1933		       a9 01		      lda	#1
   1324  1935		       85 fd		      sta	shipMinorY
   1325  1937		       a9 14		      lda	#20
   1326  1939		       4c 3c 19 	      jmp	.doneBounce
   1327  193c				   .doneBounce
   1328  193c		       85 fe		      sta	shipy
   1329  193e
   1330  193e				   .doneShipPosition
   1331  193e							; update ship velocity
   1332  193e							; are we currently going up or down?
   1333  193e		       a5 aa		      lda	shipDirection
   1334  1940		       c9 ff		      cmp	#directionUp
   1335  1942		       f0 0e		      beq	.goingUp
   1336  1944				   .goingDown
   1337  1944		       a5 cf		      lda	shipdy
   1338  1946		       c9 fa		      cmp	#255 - #gravity
   1339  1948		       30 05		      bmi	.maxVelocity
   1340  194a
   1341  194a							; increase velocity
   1342  194a		       18		      clc
   1343  194b		       69 05		      adc	#gravity
   1344  194d		       85 cf		      sta	shipdy
   1345  194f				   .maxVelocity
   1346  194f		       4c 7b 19 	      jmp	donePhysicsNotEndOfGame
   1347  1952				   .goingUp
   1348  1952		       a5 cd		      lda	jetSound
   1349  1954		       c9 00		      cmp	#0
   1350  1956		       f0 02		      beq	.notjet
   1351  1958		       c6 cd		      dec	jetSound
   1352  195a				   .notjet
   1353  195a		       a5 cf		      lda	shipdy
   1354  195c							; decrease velocity
   1355  195c		       38		      sec
   1356  195d		       e9 05		      sbc	#gravity
   1357  195f		       90 05		      bcc	.switchToDown
   1358  1961		       85 cf		      sta	shipdy
   1359  1963		       4c 7b 19 	      jmp	donePhysicsNotEndOfGame
   1360  1966				   .switchToDown
   1361  1966		       a9 00		      lda	#0
   1362  1968		       85 cf		      sta	shipdy
   1363  196a		       a9 01		      lda	#directionDown
   1364  196c		       85 aa		      sta	shipDirection
   1365  196e		       4c 71 19 	      jmp	swapMinorY
   1366  1971
   1367  1971				   swapMinorY
   1368  1971							; swap the minor y value around
   1369  1971		       a9 ff		      lda	#255
   1370  1973		       38		      sec
   1371  1974		       e5 fd		      sbc	shipMinorY
   1372  1976		       85 fd		      sta	shipMinorY
   1373  1978		       4c 7b 19 	      jmp	donePhysicsNotEndOfGame
   1374  197b				   donePhysicsNotEndOfGame
   1375  197b		       a9 00		      lda	#0	; clear zero flag to indicate not end of game
   1376  197d		       c9 01		      cmp	#1
   1377  197f		       60		      rts
   1378  1980				   donePhysicsEndOfGame
   1379  1980		       a9 00		      lda	#0	; set zero flag to indicate end of game
   1380  1982		       c9 00		      cmp	#0
   1381  1984		       60		      rts
   1382  1985
   1383  1985							;;;; Graphics routines
   1384  1985				   copyROMCharacters subroutine
   1385  1985							;;; First copy original character definitions in
   1386  1985		       a9 00		      lda	#<32768	; start of ROM character set
   1387  1987		       85 fb		      sta.z	cursor
   1388  1989		       a9 80		      lda	#>32768
   1389  198b		       85 fc		      sta.z	cursor + 1
   1390  198d
   1391  198d		       a9 00		      lda	#<7168
   1392  198f		       85 f3		      sta.z	colorcursor
   1393  1991		       a9 1c		      lda	#>7168
   1394  1993		       85 f4		      sta.z	colorcursor + 1
   1395  1995
   1396  1995		       a0 00		      ldy	#0
   1397  1997		       a2 01		      ldx	#1
   1398  1999				   .copyLoop
   1399  1999		       b1 fb		      lda	(cursor),y
   1400  199b		       91 f3		      sta	(colorcursor),y
   1401  199d		       c8		      iny
   1402  199e		       c0 00		      cpy	#0
   1403  19a0		       d0 f7		      bne	.copyLoop
   1404  19a2		       e6 fc		      inc.z	cursor + 1
   1405  19a4		       e6 f4		      inc.z	colorcursor + 1
   1406  19a6		       ca		      dex
   1407  19a7		       e0 00		      cpx	#0
   1408  19a9		       d0 ee		      bne	.copyLoop
   1409  19ab		       60		      rts
   1410  19ac
   1411  19ac				   defineCharacters subroutine
   1412  19ac		       60		      rts
   1413  19ad
   1414  19ad		       90 0e	   soundVolume equ	36878
   1415  19ad		       90 0a	   voice0     equ	36874
   1416  19ad		       90 0b	   voice1     equ	36875
   1417  19ad		       90 0c	   voice2     equ	36876
   1418  19ad		       90 0d	   voice3     equ	36877
   1419  19ad
   1420  19ad				   setUpSound
   1421  19ad		       a9 0f		      lda	#15
   1422  19af		       8d 0e 90 	      sta	soundVolume	; volume = 15
   1423  19b2		       a9 00		      lda	#0
   1424  19b4		       8d 0a 90 	      sta	voice0	; voice 0
   1425  19b7		       8d 0b 90 	      sta	voice1	; voice 1
   1426  19ba		       8d 0c 90 	      sta	voice2	; voice 2
   1427  19bd		       8d 0d 90 	      sta	voice3	; voice 3 : noise
   1428  19c0		       60		      rts
   1429  19c1				   stopSound
   1430  19c1		       a9 00		      lda	#0
   1431  19c3		       8d 0a 90 	      sta	voice0
   1432  19c6		       8d 0b 90 	      sta	voice1
   1433  19c9		       8d 0c 90 	      sta	voice2
   1434  19cc		       8d 0d 90 	      sta	voice3
   1435  19cf		       8d 0e 90 	      sta	soundVolume
   1436  19d2		       8d 50 1a 	      sta	explosionEffectCount
   1437  19d5		       60		      rts
   1438  19d6
   1439  19d6				   updateSound subroutine
   1440  19d6		       ae 50 1a 	      ldx	explosionEffectCount
   1441  19d9		       e0 00		      cpx	#0
   1442  19db		       f0 36		      beq	.engineSound
   1443  19dd		       ce 50 1a 	      dec	explosionEffectCount
   1444  19e0		       f0 1f		      beq	.restoreScreen
   1445  19e2
   1446  19e2							; shake the screen
   1447  19e2		       20 ed 17 	      jsr	random
   1448  19e5		       29 07		      and	#7
   1449  19e7		       18		      clc
   1450  19e8		       69 24		      adc	#verticalScreenDefaultPosition
   1451  19ea		       8d 01 90 	      sta	verticalScreenPosition
   1452  19ed
   1453  19ed		       20 ed 17 	      jsr	random
   1454  19f0		       09 80		      ora	#128	; set top bit so will actually make a sound
   1455  19f2		       8d 0c 90 	      sta	voice2
   1456  19f5		       aa		      tax
   1457  19f6		       29 01		      and	#1
   1458  19f8		       18		      clc
   1459  19f9		       69 0c		      adc	#horizontalScreenDefaultPosition
   1460  19fb		       8d 00 90 	      sta	horizontalScreenPosition
   1461  19fe
   1462  19fe		       4c 1c 1a 	      jmp	.makeSound
   1463  1a01				   .restoreScreen
   1464  1a01		       a9 24		      lda	#verticalScreenDefaultPosition
   1465  1a03		       8d 01 90 	      sta	verticalScreenPosition
   1466  1a06		       a9 0c		      lda	#horizontalScreenDefaultPosition
   1467  1a08		       8d 00 90 	      sta	horizontalScreenPosition
   1468  1a0b		       4c 13 1a 	      jmp	.engineSound
   1469  1a0e				   .crashSound
   1470  1a0e		       a2 fe		      ldx	#shipy
   1471  1a10							;				stx fuelSoundCount
   1472  1a10		       4c 1c 1a 	      jmp	.makeSound
   1473  1a13				   .engineSound
   1474  1a13		       ad 73 12 	      lda	flags
   1475  1a16		       29 01		      and	#crashing
   1476  1a18		       d0 f4		      bne	.crashSound
   1477  1a1a
   1478  1a1a		       a6 b1		      ldx	shipdx
   1479  1a1c				   .makeSound
   1480  1a1c		       8e 0d 90 	      stx	voice3
   1481  1a1f
   1482  1a1f		       a5 a9		      lda	fuelSoundCount
   1483  1a21		       8d 0c 90 	      sta	voice2
   1484  1a24		       2a		      rol
   1485  1a25		       8d 0a 90 	      sta	voice0
   1486  1a28		       a5 a9		      lda	fuelSoundCount
   1487  1a2a		       c9 00		      cmp	#0
   1488  1a2c		       f0 07		      beq	.donefuelsound
   1489  1a2e		       aa		      tax
   1490  1a2f		       e8		      inx
   1491  1a30		       e8		      inx
   1492  1a31		       e8		      inx
   1493  1a32		       e8		      inx
   1494  1a33		       86 a9		      stx	fuelSoundCount
   1495  1a35				   .donefuelsound
   1496  1a35		       ad 67 1a 	      lda	effectCount
   1497  1a38		       a2 00		      ldx	#0
   1498  1a3a		       c9 00		      cmp	#0
   1499  1a3c		       f0 0e		      beq	.doneEffect
   1500  1a3e							; the effect is in progress
   1501  1a3e		       a2 fa		      ldx	#250
   1502  1a40		       ce 67 1a 	      dec	effectCount
   1503  1a43		       29 03		      and	#3
   1504  1a45		       f0 05		      beq	.doneEffect
   1505  1a47		       a2 ff		      ldx	#255
   1506  1a49		       20 a1 14 	      jsr	increaseScoreBy10
   1507  1a4c
   1508  1a4c				   .doneEffect
   1509  1a4c		       8e 0b 90 	      stx	voice1
   1510  1a4f		       60		      rts
   1511  1a50
   1512  1a50		       00	   explosionEffectCount dc.b	0
   1513  1a51
   1514  1a51				   explosionEffect subroutine
   1515  1a51		       a9 0a		      lda	#10
   1516  1a53		       8d 50 1a 	      sta	explosionEffectCount
   1517  1a56		       60		      rts
   1518  1a57
   1519  1a57				   bonusSound1 subroutine
   1520  1a57		       a9 c8		      lda	#200
   1521  1a59		       85 a9		      sta	fuelSoundCount
   1522  1a5b		       a9 28		      lda	#40
   1523  1a5d		       8d 67 1a 	      sta	effectCount
   1524  1a60		       60		      rts
   1525  1a61
   1526  1a61				   powerUp    subroutine
   1527  1a61		       a9 64		      lda	#100
   1528  1a63		       8d 67 1a 	      sta	effectCount
   1529  1a66		       60		      rts
   1530  1a67
   1531  1a67		       00	   effectCount dc.b	0
   1532  1a68
   1533  1a68		       00 17	   screenWidth equ	23
   1534  1a68		       00 18	   screenHeight equ	24
   1535  1a68
   1536  1a68				   explode    subroutine
   1537  1a68		       a0 ff		      ldy	#255
   1538  1a6a		       a2 ff		      ldx	#255
   1539  1a6c				   .loop
   1540  1a6c		       8e 0f 90 	      stx	borderPaper
   1541  1a6f		       8c 0c 90 	      sty	voice2
   1542  1a72		       8c 0b 90 	      sty	voice1
   1543  1a75		       8c 0a 90 	      sty	voice0
   1544  1a78		       ca		      dex
   1545  1a79		       d0 f1		      bne	.loop
   1546  1a7b		       88		      dey
   1547  1a7c		       d0 ee		      bne	.loop
   1548  1a7e		       60		      rts
   1549  1a7f
   1550  1a7f				   startScreen subroutine
   1551  1a7f		       20 c1 19 	      jsr	stopSound
   1552  1a82
   1553  1a82							; clear screen and display score
   1554  1a82		       a9 37		      lda	#<startMessage
   1555  1a84		       85 fb		      sta.z	cursor	;
   1556  1a86		       a9 12		      lda	#>startMessage
   1557  1a88		       85 fc		      sta.z	cursor + 1
   1558  1a8a		       20 f8 15 	      jsr	printline
   1559  1a8d
   1560  1a8d		       20 91 1a 	      jsr	waitForStartKey
   1561  1a90		       60		      rts
   1562  1a91
   1563  1a91				   waitForStartKey subroutine
   1564  1a91		       20 ed 17 	      jsr	random
   1565  1a94
   1566  1a94		       a9 00		      lda	#0
   1567  1a96		       8d 20 91 	      sta	$9120	; reset keyboard state
   1568  1a99		       ad 21 91 	      lda	$9121
   1569  1a9c
   1570  1a9c		       c9 fe		      cmp	#254	; space key
   1571  1a9e		       f0 0c		      beq	.restart
   1572  1aa0
   1573  1aa0		       ad 11 91 	      lda	joystickIn1
   1574  1aa3		       29 20		      and	#32	; set all other bits. Only care about fire button
   1575  1aa5		       c9 20		      cmp	#32
   1576  1aa7		       f0 e8		      beq	waitForStartKey
   1577  1aa9		       4c ac 1a 	      jmp	.restart
   1578  1aac
   1579  1aac				   .restart
   1580  1aac		       a9 00		      lda	#0
   1581  1aae		       8d 70 12 	      sta	levelNumber	; reset level to start
   1582  1ab1		       a9 00		      lda	#0
   1583  1ab3		       85 b0		      sta	shipMinorX
   1584  1ab5		       a9 02		      lda	#2
   1585  1ab7		       8d 74 12 	      sta	rocketProbability
   1586  1aba
   1587  1aba		       a9 64		      lda	#100
   1588  1abc		       85 b1		      sta	shipdx
   1589  1abe
   1590  1abe		       60		      rts
   1591  1abf
   1592  1abf							; level format:
   1593  1abf							; Bytes 0 - 3: front, middle, middle, back edge characters for mid-way through tower on top
   1594  1abf							;	 4 - 7: front, middle, middle, back edge characters for edges of tower on top
   1595  1abf							;	 8 - 11: front, middle, middle, back edge characters for mid-way through tower on bottom
   1596  1abf							;	 12 - 15: front, middle, middle, back edge characters for edges of tower on bottom
   1597  1abf
   1598  1abf							;	 16    : horizontal gap between towers
   1599  1abf							;	 17    : vertical gap between towers
   1600  1abf							;	 18    : border and paper colour
   1601  1abf
   1602  1abf							;	 19-20: number of moves before switching to next level (lo,hi)
   1603  1abf
   1604  1abf							;		21	 ; minimum horizontal speed
   1605  1abf							;		22	 ; background map number
   1606  1abf
   1607  1abf
   1608  1abf		       00 01	   fuelActiveFlag equ	#1
   1609  1abf
   1610  1abf							; specify the order of levels. 255 instructs to wrap around
   1611  1abf		       00 ff	   finishedLevels equ	255
   1612  1abf		       01 02 00 03*levelOrder dc.b	1,2,0,3,0,4,0,0,5,6,finishedLevels
   1613  1aca
   1614  1aca				   startOfLevelDefinitions
   1615  1aca		       20 20 20 20 spaceLevel dc.b	spacePrintable,spacePrintable,spacePrintable,spacePrintable
   1616  1ace		       20 20 09 02	      dc.b	spacePrintable,spacePrintable,starRightPrintable,starLeftPrintable
   1617  1ad2		       20 20 20 20	      dc.b	spacePrintable,spacePrintable,spacePrintable,spacePrintable
   1618  1ad6		       09 02 20 20	      dc.b	starRightPrintable,starLeftPrintable,spacePrintable,spacePrintable
   1619  1ada		       05 0e 08 	      dc.b	5,14,8	; black border, black paper
   1620  1add		       fa 01		      dc.b	250,1
   1621  1adf		       50 01		      dc.b	80, 1
   1622  1ae1
   1623  1ae1		       0a 14 14 03 towerChars0 dc.b	blackRightPrintable,blackPrintable,blackPrintable,blackLeftPrintable
   1624  1ae5		       0a 14 14 03	      dc.b	blackRightPrintable,blackPrintable,blackPrintable,blackLeftPrintable
   1625  1ae9		       0a 14 14 03	      dc.b	blackRightPrintable,blackPrintable,blackPrintable,blackLeftPrintable
   1626  1aed		       0a 14 14 03	      dc.b	blackRightPrintable,blackPrintable,blackPrintable,blackLeftPrintable
   1627  1af1		       08 18 03 	      dc.b	8,24,3
   1628  1af4		       01 02		      dc.b	1,2
   1629  1af6		       0a 00		      dc.b	10, 0
   1630  1af8
   1631  1af8		       20 08 01 20 towerChars1 dc.b	spacePrintable,towerRightPrintable,towerLeftPrintable,spacePrintable
   1632  1afc		       07 0e 0e 00	      dc.b	solidRightPrintable,solidPrintable,solidPrintable,solidLeftPrintable
   1633  1b00		       20 08 01 20	      dc.b	spacePrintable,towerRightPrintable,towerLeftPrintable,spacePrintable
   1634  1b04		       07 0e 0e 00	      dc.b	solidRightPrintable,solidPrintable,solidPrintable,solidLeftPrintable
   1635  1b08		       0a 0a 03 	      dc.b	10,10,3
   1636  1b0b		       01 03		      dc.b	1,3
   1637  1b0d		       0a 00		      dc.b	10, 0
   1638  1b0f
   1639  1b0f		       20 08 01 20	      dc.b	spacePrintable,towerRightPrintable,towerLeftPrintable,spacePrintable
   1640  1b13		       07 0e 0e 00	      dc.b	solidRightPrintable,solidPrintable,solidPrintable,solidLeftPrintable
   1641  1b17		       20 08 01 20	      dc.b	spacePrintable,towerRightPrintable,towerLeftPrintable,spacePrintable
   1642  1b1b		       07 0e 0e 00	      dc.b	solidRightPrintable,solidPrintable,solidPrintable,solidLeftPrintable
   1643  1b1f
   1644  1b1f		       1c 07 30 	      dc.b	28,7,56 - 8
   1645  1b22		       96 02		      dc.b	150,2
   1646  1b24		       0f 02		      dc.b	15, 2
   1647  1b26
   1648  1b26		       20 08 01 20	      dc.b	spacePrintable,towerRightPrintable,towerLeftPrintable,spacePrintable
   1649  1b2a		       07 0e 0e 00	      dc.b	solidRightPrintable,solidPrintable,solidPrintable,solidLeftPrintable
   1650  1b2e		       20 08 01 20	      dc.b	spacePrintable,towerRightPrintable,towerLeftPrintable,spacePrintable
   1651  1b32		       07 0e 0e 00	      dc.b	solidRightPrintable,solidPrintable,solidPrintable,solidLeftPrintable
   1652  1b36		       07 0f 03 	      dc.b	7,15,3
   1653  1b39		       96 03		      dc.b	150,3
   1654  1b3b		       0f 00		      dc.b	15, 0
   1655  1b3d
   1656  1b3d		       00 07	   maxLevel   equ	7
   1657  1b3d
   1658  1b3d							;;;; Set up characters to use when drawing towers. X should have tower set number, 0 being the first
   1659  1b3d							;;;; Every odd numbered level will be level 1. Otherwise, it's the level number divided by 2
   1660  1b3d				   setupTowerCharacters subroutine
   1661  1b3d		       a9 ca		      lda	#<startOfLevelDefinitions
   1662  1b3f		       85 fb		      sta	cursor
   1663  1b41		       a9 1a		      lda	#>startOfLevelDefinitions
   1664  1b43		       85 fc		      sta	cursor + 1
   1665  1b45		       a0 00		      ldy	#0
   1666  1b47				   .levelFindLoop
   1667  1b47		       b9 bf 1a 	      lda	levelOrder,y
   1668  1b4a		       c9 ff		      cmp	#finishedLevels
   1669  1b4c		       f0 55		      beq	.endOfLevels
   1670  1b4e				   .endOfLevelsReturn
   1671  1b4e		       e0 00		      cpx	#0
   1672  1b50		       f0 05		      beq	.foundLevel
   1673  1b52		       ca		      dex
   1674  1b53		       c8		      iny
   1675  1b54		       4c 47 1b 	      jmp	.levelFindLoop
   1676  1b57				   .foundLevel
   1677  1b57		       aa		      tax
   1678  1b58							; x now holds the number of the level description
   1679  1b58				   .xloop
   1680  1b58		       a9 17		      lda	#23	; number of positions to skip over to get next set of characters
   1681  1b5a		       e0 00		      cpx	#0	; use this character set?
   1682  1b5c		       f0 07		      beq	.useThis
   1683  1b5e		       20 86 16 	      jsr	addcursor
   1684  1b61		       ca		      dex
   1685  1b62		       4c 58 1b 	      jmp	.xloop
   1686  1b65				   .useThis
   1687  1b65		       a0 00		      ldy	#0
   1688  1b67		       a9 1b		      lda	#<towercharacters
   1689  1b69		       85 f3		      sta	colorcursor
   1690  1b6b		       a9 00		      lda	#>towercharacters
   1691  1b6d		       85 f4		      sta	colorcursor + 1
   1692  1b6f				   .yloop
   1693  1b6f		       b1 fb		      lda	(cursor),y
   1694  1b71		       91 f3		      sta	(colorcursor),y
   1695  1b73		       c8		      iny
   1696  1b74		       c0 10		      cpy	#16
   1697  1b76		       d0 f7		      bne	.yloop
   1698  1b78				   .done
   1699  1b78		       20 9f 1b 	      jsr	.getNext
   1700  1b7b		       85 92		      sta	distanceBetweenTowers
   1701  1b7d
   1702  1b7d		       20 9f 1b 	      jsr	.getNext
   1703  1b80		       85 8f		      sta	gapWidth
   1704  1b82
   1705  1b82		       20 9f 1b 	      jsr	.getNext
   1706  1b85		       8d 0f 90 	      sta	borderPaper
   1707  1b88
   1708  1b88		       20 9f 1b 	      jsr	.getNext
   1709  1b8b		       85 8c		      sta	progressCounterLo
   1710  1b8d
   1711  1b8d		       20 9f 1b 	      jsr	.getNext
   1712  1b90		       85 8b		      sta	progressCounterHi
   1713  1b92
   1714  1b92		       20 9f 1b 	      jsr	.getNext
   1715  1b95		       85 8e		      sta	minShipDx
   1716  1b97
   1717  1b97		       20 9f 1b 	      jsr	.getNext
   1718  1b9a		       aa		      tax
   1719  1b9b		       20 61 15 	      jsr	prepareColors
   1720  1b9e		       60		      rts
   1721  1b9f
   1722  1b9f		       b1 fb	   .getNext   lda	(cursor),y
   1723  1ba1		       c8		      iny
   1724  1ba2		       60		      rts
   1725  1ba3				   .endOfLevels
   1726  1ba3		       a0 00		      ldy	#0	; reset back to start
   1727  1ba5				   .doneSpeedup
   1728  1ba5		       4c 4e 1b 	      jmp	.endOfLevelsReturn
   1729  1ba8
   1730  1ba8				   resetScroll subroutine
   1731  1ba8							; reset smooth scrolling back to the start
   1732  1ba8		       a5 cc		      lda	scrollCounter
   1733  1baa		       c9 08		      cmp	#8
   1734  1bac		       f0 0c		      beq	.scrollDone
   1735  1bae		       c9 00		      cmp	#0
   1736  1bb0				   .scrollLoop
   1737  1bb0		       f0 08		      beq	.scrollDone
   1738  1bb2		       20 45 13 	      jsr	smoothScroll
   1739  1bb5		       c6 cc		      dec	scrollCounter
   1740  1bb7		       4c b0 1b 	      jmp	.scrollLoop
   1741  1bba				   .scrollDone
   1742  1bba		       a9 08		      lda	#8
   1743  1bbc		       85 cc		      sta	scrollCounter
   1744  1bbe		       85 2b		      sta	lastFrameWasScroll
   1745  1bc0		       60		      rts
   1746  1bc1
   1747  1bc1				   programEnd
   1748  1bc1		       00		      dc.b	0
   1749  1bc2
   1750  1bc2							; now for the graphics
   1751  1c00					      org	7168
   1752  1c00
   1753  1c00				   startOfChars
   1754  1c00				   scrollable
   1755  1c00							; first the scrollable characters. All the left hand edges, then right hand
   1756  1c00				   leftEdges
   1757  1c00
   1758  1c00		       00 00 00 00*solidLeftChar dc.b	0,0,0,0,0,0,0,0
   1759  1c08		       00 00 00 00*towerLeftChar dc.b	0,0,0,0,0,0,0,0
   1760  1c10		       00 00 00 00*starLeftChar dc.b	0,0,0,0,0,0,0,0
   1761  1c18		       00 00 00 00*blackLeftChar dc.b	0,0,0,0,0,0,0,0
   1762  1c20		       00 00 00 00*fuelLeftChar dc.b	0,0,0,0,0,0,0,0
   1763  1c28		       00 00 00 00*baddyLeftChar dc.b	0,0,0,0,0,0,0,0
   1764  1c30		       00 00 00 00*baddyBottomLeftChar dc.b	0,0,0,0,0,0,0,0
   1765  1c38
   1766  1c38				   rightEdges
   1767  1c38
   1768  1c38		       ff ff 00 ff*solidRightChar dc.b	255,255,0,255,255,0,255,255
   1769  1c40		       91 89 c5 a3*towerRightChar dc.b	145,137,197,163,145,137,197,163
   1770  1c48		       10 10 38 fe*starRightChar dc.b	16,16,56,254,56,16,16,16
   1771  1c50		       df df df 00*blackRightChar dc.b	223,223,223,0,251,251,251,0
   1772  1c58		       7e 42 df c7*fuelRightChar dc.b	126,66,223,199,223,223,94,126
   1773  1c60		       10 10 38 38*baddyRightChar dc.b	16,16,56,56,40,40,40,40
   1774  1c68		       28 28 7c c6*baddyBottomRightChar dc.b	40,40,124,198,254,254,198,130
   1775  1c70
   1776  1c70		       00 07	   numberOfScrollableCharacters equ	(rightEdges - leftEdges) / 8
   1777  1c70
   1778  1c70		       00 04	   fuelLeftPrintable equ	(fuelLeftChar - startOfChars) / 8
   1779  1c70		       00 0b	   fuelRightPrintable equ	(fuelRightChar - startOfChars) / 8
   1780  1c70		       00 05	   baddyLeftPrintable equ	(baddyLeftChar - startOfChars) / 8
   1781  1c70		       00 0c	   baddyRightPrintable equ	(baddyRightChar - startOfChars) / 8
   1782  1c70		       00 06	   baddyBottomLeftPrintable equ	(baddyBottomLeftChar - startOfChars) / 8
   1783  1c70		       00 0d	   baddyBottomRightPrintable equ	(baddyBottomRightChar - startOfChars) / 8
   1784  1c70		       00 01	   towerLeftPrintable equ	(towerLeftChar - startOfChars) / 8
   1785  1c70		       00 08	   towerRightPrintable equ	(towerRightChar - startOfChars) / 8
   1786  1c70		       00 00	   solidLeftPrintable equ	(solidLeftChar - startOfChars) / 8
   1787  1c70		       00 07	   solidRightPrintable equ	(solidRightChar - startOfChars) / 8
   1788  1c70		       00 02	   starLeftPrintable equ	(starLeftChar - startOfChars) / 8
   1789  1c70		       00 09	   starRightPrintable equ	(starRightChar - startOfChars) / 8
   1790  1c70		       00 03	   blackLeftPrintable equ	(blackLeftChar - startOfChars) / 8
   1791  1c70		       00 0a	   blackRightPrintable equ	(blackRightChar - startOfChars) / 8
   1792  1c70
   1793  1c70				   nonscrollable
   1794  1c70							; now the non scrollble characters
   1795  1c70							; striped block, not scrollable
   1796  1c70		       ff ff 00 ff*solidChar  dc.b	255,255,0,255,255,0,255,255
   1797  1c70		       00 0e	   solidPrintable equ	(solidChar - startOfChars) / 8
   1798  1c78		       ff 00 00 00*goingUpChar dc.b	255,0,0,0,0,0,0,0
   1799  1c78		       00 0f	   goingUpPrintable equ	(goingUpChar - startOfChars) / 8
   1800  1c80		       00 00 00 00*goingDownChar dc.b	0,0,0,0,0,0,0,255
   1801  1c80		       00 10	   goingDownPrintable equ	(goingDownChar - startOfChars) / 8
   1802  1c88
   1803  1c88				   singleScrollable
   1804  1c88		       00 04	   numberOfSingleScrollableChars equ	(endOfScenery - singleScrollable) / 8
   1805  1c88
   1806  1c88							; now the single character rotational scrolling blocks
   1807  1c88							; wavy block at bottom of screen
   1808  1c88		       c0 30 0c 03*bottomBlockChar dc.b	128+64, 32+16, 8+4, 2+1, 2+1, 8+4, 32+16, 128+64
   1809  1c90		       00 00 00 01*jetSpotChar dc.b	0, 0, 0, 1, 0, 0, 0, 0
   1810  1c98		       58 5b 01 2d*explodeChar dc.b	88,91,1,45,185,231,0,233
   1811  1ca0		       df df df 00*blackChar  dc.b	223,223,223,0,251,251,251,0
   1812  1ca8
   1813  1ca8		       00 11	   bottomBlockPrintable equ	(bottomBlockChar - startOfChars) / 8
   1814  1ca8		       00 12	   jetSpotPrintable equ	(jetSpotChar - startOfChars) / 8
   1815  1ca8		       00 13	   explodePrintable equ	(explodeChar - startOfChars) / 8
   1816  1ca8		       00 14	   blackPrintable equ	(blackChar - startOfChars) / 8
   1817  1ca8
   1818  1ca8				   endOfScenery
   1819  1ca8
   1820  1ca8							; now for the space
   1821  1d00					      org	startOfChars + 32 *8
   1822  1d00
   1823  1d00		       00 00 00 00*spaceChar  dc.b	0, 0, 0, 0, 0, 0, 0, 0
   1824  1d00		       00 20	   spacePrintable equ	(spaceChar - startOfChars) / 8
   1825  1d08
   1826  1d08							; now for the pre-computed space ship characters, first the top half, then the bottom half
   1827  1d08		       19 c8	   shipBottomPrintable equ	(shipBottom - startOfChars / 8)
   1828  1d08		       00 21	   shipTopPrintable equ	(shipTop - startOfChars) / 8
   1829  1d08
   1830  1d08				   shipTop
   1831  1d08		       c0 f0 fc ff*	      dc.b	128+64,128+64+32+16,128+64+32+16+8+4,255, 255, 128+64+32+16+8+4, 128+64+32+16, 128+64
   1832  1d10		       00 c0 f0 fc*	      dc.b	0, 128+64,128+64+32+16,128+64+32+16+8+4,255, 255, 128+64+32+16+8+4, 128+64+32+16
   1833  1d18		       00 00 c0 f0*	      dc.b	0, 0, 128+64,128+64+32+16,128+64+32+16+8+4,255, 255, 128+64+32+16+8+4
   1834  1d20		       00 00 00 c0*	      dc.b	0, 0, 0, 128+64,128+64+32+16,128+64+32+16+8+4,255, 255
   1835  1d28
   1836  1d28		       00 00 00 00*	      dc.b	0, 0, 0, 0, 128+64,128+64+32+16,128+64+32+16+8+4,255
   1837  1d30		       00 00 00 00*	      dc.b	0, 0, 0, 0, 0, 128+64,128+64+32+16,128+64+32+16+8+4
   1838  1d38		       00 00 00 00*	      dc.b	0, 0, 0, 0, 0, 0, 128+64,128+64+32+16
   1839  1d40		       00 00 00 00*	      dc.b	0, 0, 0, 0, 0, 0, 0, 128+64
   1840  1d48				   shipBottom
   1841  1d48		       00 00 00 00*	      dc.b	0, 0, 0, 0, 0, 0, 0, 0
   1842  1d50		       c0 00 00 00*	      dc.b	128+64, 0, 0, 0, 0, 0, 0, 0
   1843  1d58		       f0 c0 00 00*	      dc.b	128+64+32+16, 128+64, 0, 0, 0, 0, 0, 0
   1844  1d60		       fc f0 c0 00*	      dc.b	128+64+32+16+8+4, 128+64+32+16, 128+64, 0, 0, 0, 0, 0
   1845  1d68
   1846  1d68		       ff fc f0 c0*	      dc.b	255, 128+64+32+16+8+4, 128+64+32+16, 128+64, 0, 0, 0, 0
   1847  1d70		       ff ff fc f0*	      dc.b	255, 255, 128+64+32+16+8+4, 128+64+32+16, 128+64, 0, 0, 0
   1848  1d78		       fc ff ff fc*	      dc.b	128+64+32+16+8+4, 255, 255, 128+64+32+16+8+4, 128+64+32+16, 128+64, 0, 0
   1849  1d80		       f0 fc ff ff*	      dc.b	128+64+32+16,128+64+32+16+8+4,255, 255, 128+64+32+16+8+4, 128+64+32+16, 128+64, 0
   1850  1d88				   enfOfChars
   1851  1d88
   1852  1d88							;		org	startOfChars + 32 * 8
   1853  1d88							;		dc.b	0,0,0,0,0,0,0,0 ; define the space character
   1854  1d88
   1855  1d88							;		org	startOfChars + 33 * 8
   1856  1d88
   1857  1d88							; background map format is:
   1858  1d88							; starts in backbround mode (i.e. space)
   1859  1d88							; [instruction][instruction][instruction], etc
   1860  1d88							;
   1861  1d88							; where:
   1862  1d88							;	instruction = 253: continue to end of screen
   1863  1d88							;	instruction	< 253: number of characters in run before inverting (i.e. background to foreground)
   1864  1d88							;	instruction = 254, x: change background color to following byte
   1865  1d88							;	instruction = 255, x: change foreground color to following byte
   1866  1d88
   1867  1d88				   backgroundMap
   1868  1d88							; map 0
   1869  1d88		       ff 04 fe 00*	      dc	255, 4, 254, 0, 22	; title
   1870  1d8d		       fe 03 ff 01	      dc	254, 3, 255, 1	; change colours to clouds
   1871  1d91		       46 01 14 02*	      dc	70,1,20,2,1,2,16,7,7,1,1,2,4,7,6,6,16,6,115
   1872  1da4		       ff 06		      dc	255, 6	; change colour to buildings
   1873  1da6		       01 03 01 0f*	      dc	1,3,1,15,1,1,1,3,1,15,3,1,1,1,1,6,1,7,4,1,5,3,2,7,11,2,3,5
   1874  1dc2		       ff 05		      dc	255, 5	; change colour to grass
   1875  1dc4		       6e		      dc	110
   1876  1dc5		       fd		      dc	253	; end
   1877  1dc6							; map 1
   1878  1dc6		       ff 04 fe 00*	      dc	255, 4, 254, 0, 22	; title
   1879  1dcb		       fe 01 ff 02*	      dc	254, 1, 255, 2, 44, 44
   1880  1dd1		       fe 07 ff 01*	      dc	254, 7, 255, 1, 44, 44
   1881  1dd7		       fe 04 ff 07*	      dc	254, 4, 255, 7, 44, 44
   1882  1ddd		       fe 02 ff 01*	      dc	254, 2, 255, 1, 44, 44
   1883  1de3		       fe 07 ff 04*	      dc	254, 7, 255, 4, 44, 44
   1884  1de9		       fd		      dc	253	; end
   1885  1dea							; map 2
   1886  1dea		       ff 04 fe 00*	      dc	255, 4, 254, 0, 22	; title
   1887  1def		       fe 05 ff 00*	      dc	254, 5, 255,0,
   1888  1df4		       52 02 13 04*	      dc	82, 2, 19, 4, 18, 4, 19, 2
   1889  1dfc		       fe 03		      dc	254, 3
   1890  1dfe		       e1 01 09 01*	      dc	225, 1, 9, 1, 6, 1, 4, 2, 1, 2, 5
   1891  1e09		       02 03 03 03*	      dc	2, 3, 3, 3, 7, 2, 4, 2, 5, 2, 22, 22
   1892  1e15		       fd		      dc	253	; end
   1893  1e16
   1894  1e16				   dataEnd
   1895  1e16		       00		      dc.b	0
   1896  1e17
 To run: SYS  $1204
   1897  1e17					      echo	"To run: SYS ", start
 Total length  $c12
   1898  1e17					      echo	"Total length ", dataEnd - start
 Code space left  $3f
   1899  1e17					      echo	"Code space left ", 7168 - programEnd
 Characters left  $b
   1900  1e17					      echo	"Characters left ", (spaceChar - endOfScenery) / 8
 End  $1e16
   1901  1e17					      echo	"End ", dataEnd
   1902  1e17
   1903  1e17
   1904  1e17
   1905  1e17
